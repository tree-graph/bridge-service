// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package tokens

import (
	"math/big"
	"strings"

	"github.com/Conflux-Chain/go-conflux-sdk/bind"
	"github.com/Conflux-Chain/go-conflux-sdk/cfxclient/bulk"

	types "github.com/Conflux-Chain/go-conflux-sdk/types"
	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	ethBind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	ethtypes "github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = ethBind.Bind
	_ = common.Big1
	_ = ethtypes.BloomLookup
	_ = event.NewSubscription
)

// RouterPeerInfo is an auto generated low-level Go binding around an user-defined struct.
type RouterPeerInfo struct {
	Op         uint8
	Eip        uint8
	Timestamp  *big.Int
	Registerer common.Address
	Enable     bool
	UriMode    uint8
}

// TokenVaultABI is the input ABI used to generate the binding from.
const TokenVaultABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remoteContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"remoteChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"localContract\",\"type\":\"address\"}],\"name\":\"ArrivalConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userNonce\",\"type\":\"uint256\"}],\"name\":\"CrossRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"remoteContract\",\"type\":\"address\"}],\"name\":\"DepartureConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetContract\",\"type\":\"address\"},{\"internalType\":\"contractIERC721\",\"name\":\"assetContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"srcContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"localContract\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"uris\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userNonce_\",\"type\":\"uint256\"}],\"name\":\"claimByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"indexContract\",\"type\":\"address\"}],\"name\":\"detectLocalEIP\",\"outputs\":[{\"internalType\":\"enumRouter.EIP\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"peer\",\"type\":\"address\"}],\"name\":\"getArrivalInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"enumRouter.OP\",\"name\":\"op\",\"type\":\"uint8\"},{\"internalType\":\"enumRouter.EIP\",\"name\":\"eip\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"registerer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"enumRouter.URI_MODE\",\"name\":\"uriMode\",\"type\":\"uint8\"}],\"internalType\":\"structRouter.PeerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"peer\",\"type\":\"address\"}],\"name\":\"getDepartureInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"enumRouter.OP\",\"name\":\"op\",\"type\":\"uint8\"},{\"internalType\":\"enumRouter.EIP\",\"name\":\"eip\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"registerer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"enumRouter.URI_MODE\",\"name\":\"uriMode\",\"type\":\"uint8\"}],\"internalType\":\"structRouter.PeerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcChainId\",\"type\":\"uint256\"}],\"name\":\"getUserNextClaimNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"listArrivalChainIndex\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"listArrivalIndex\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"listArrivalPeerIndex\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"listDepartureChainIndex\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"listDepartureIndex\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"listDeparturePeerIndex\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"remoteContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"remoteChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumRouter.OP\",\"name\":\"op\",\"type\":\"uint8\"},{\"internalType\":\"enumRouter.URI_MODE\",\"name\":\"uriMode\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"localContract\",\"type\":\"address\"}],\"name\":\"registerArrival\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"enumRouter.OP\",\"name\":\"op\",\"type\":\"uint8\"},{\"internalType\":\"enumRouter.URI_MODE\",\"name\":\"uriMode\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"remoteContract\",\"type\":\"address\"}],\"name\":\"registerDeparture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// TokenVaultBin is the compiled bytecode used for deploying new contracts.
var TokenVaultBin = ""

// DeployTokenVault deploys a new Conflux contract, binding an instance of TokenVault to it.
func DeployTokenVault(auth *bind.TransactOpts, backend bind.ContractBackend) (*types.UnsignedTransaction, *types.Hash, *TokenVault, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenVaultABI))
	if err != nil {
		return nil, nil, nil, err
	}

	tx, hash, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TokenVaultBin), backend)
	if err != nil {
		return nil, nil, nil, err
	}
	return tx, hash, &TokenVault{TokenVaultCaller: TokenVaultCaller{contract: contract}, TokenVaultTransactor: TokenVaultTransactor{contract: contract}, TokenVaultFilterer: TokenVaultFilterer{contract: contract}}, nil
}

// TokenVault is an auto generated Go binding around an Conflux contract.
type TokenVault struct {
	TokenVaultCaller     // Read-only binding to the contract
	TokenVaultTransactor // Write-only binding to the contract
	TokenVaultFilterer   // Log filterer for contract events
}

// TokenVaultCaller is an auto generated read-only Go binding around an Conflux contract.
type TokenVaultCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenVaultBulkCaller is an auto generated read-only Go binding around an Conflux contract.
type TokenVaultBulkCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenVaultTransactor is an auto generated write-only Go binding around an Conflux contract.
type TokenVaultTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenVaultBulkTransactor is an auto generated write-only Go binding around an Conflux contract.
type TokenVaultBulkTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenVaultFilterer is an auto generated log filtering Go binding around an Conflux contract events.
type TokenVaultFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenVaultSession is an auto generated Go binding around an Conflux contract,
// with pre-set call and transact options.
type TokenVaultSession struct {
	Contract     *TokenVault       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenVaultCallerSession is an auto generated read-only Go binding around an Conflux contract,
// with pre-set call options.
type TokenVaultCallerSession struct {
	Contract *TokenVaultCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// TokenVaultTransactorSession is an auto generated write-only Go binding around an Conflux contract,
// with pre-set transact options.
type TokenVaultTransactorSession struct {
	Contract     *TokenVaultTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// TokenVaultRaw is an auto generated low-level Go binding around an Conflux contract.
type TokenVaultRaw struct {
	Contract *TokenVault // Generic contract binding to access the raw methods on
}

// TokenVaultCallerRaw is an auto generated low-level read-only Go binding around an Conflux contract.
type TokenVaultCallerRaw struct {
	Contract *TokenVaultCaller // Generic read-only contract binding to access the raw methods on
}

// TokenVaultTransactorRaw is an auto generated low-level write-only Go binding around an Conflux contract.
type TokenVaultTransactorRaw struct {
	Contract *TokenVaultTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenVault creates a new instance of TokenVault, bound to a specific deployed contract.
func NewTokenVault(address types.Address, backend bind.ContractBackend) (*TokenVault, error) {
	contract, err := bindTokenVault(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenVault{TokenVaultCaller: TokenVaultCaller{contract: contract}, TokenVaultTransactor: TokenVaultTransactor{contract: contract}, TokenVaultFilterer: TokenVaultFilterer{contract: contract}}, nil
}

// NewTokenVaultCaller creates a new read-only instance of TokenVault, bound to a specific deployed contract.
func NewTokenVaultCaller(address types.Address, caller bind.ContractCaller) (*TokenVaultCaller, error) {
	contract, err := bindTokenVault(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenVaultCaller{contract: contract}, nil
}

// NewTokenVaultTransactor creates a new write-only instance of TokenVault, bound to a specific deployed contract.
func NewTokenVaultTransactor(address types.Address, transactor bind.ContractTransactor) (*TokenVaultTransactor, error) {
	contract, err := bindTokenVault(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenVaultTransactor{contract: contract}, nil
}

// NewTokenVaultFilterer creates a new log filterer instance of TokenVault, bound to a specific deployed contract.
func NewTokenVaultFilterer(address types.Address, filterer bind.ContractFilterer) (*TokenVaultFilterer, error) {
	contract, err := bindTokenVault(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenVaultFilterer{contract: contract}, nil
}

// NewTokenVaultCaller creates a new read-only instance of TokenVault, bound to a specific deployed contract.
func NewTokenVaultBulkCaller(address types.Address, caller bind.ContractCaller) (*TokenVaultBulkCaller, error) {
	contract, err := bindTokenVault(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenVaultBulkCaller{contract: contract}, nil
}

// NewTokenVaultBulkTransactor creates a new write-only instance of TokenVault, bound to a specific deployed contract.
func NewTokenVaultBulkTransactor(address types.Address, transactor bind.ContractTransactor) (*TokenVaultBulkTransactor, error) {
	contract, err := bindTokenVault(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenVaultBulkTransactor{contract: contract}, nil
}

// bindTokenVault binds a generic wrapper to an already deployed contract.
func bindTokenVault(address types.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TokenVaultABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenVault *TokenVaultRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenVault.Contract.TokenVaultCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenVault *TokenVaultRaw) Transfer(opts *bind.TransactOpts) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.TokenVaultTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenVault *TokenVaultRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.TokenVaultTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenVault *TokenVaultCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenVault.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenVault *TokenVaultTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenVault *TokenVaultTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_TokenVault *TokenVaultCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	__err := _TokenVault.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if __err != nil {
		return *new([32]byte), __err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, __err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_TokenVault *TokenVaultBulkCaller) DEFAULTADMINROLE(bulkcaller bulk.BulkCaller, opts *bind.CallOpts) (*[32]byte, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _TokenVault.contract.GenRequest(opts, "DEFAULT_ADMIN_ROLE")

	out0 := new([32]byte)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _TokenVault.contract.DecodeOutput(&out, rawOut, "DEFAULT_ADMIN_ROLE")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_TokenVault *TokenVaultSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _TokenVault.Contract.DEFAULTADMINROLE(&_TokenVault.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_TokenVault *TokenVaultCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _TokenVault.Contract.DEFAULTADMINROLE(&_TokenVault.CallOpts)
}

// Claim is a free data retrieval call binding the contract method 0xc63ff8dd.
//
// Solidity: function claim(bytes ) pure returns()
func (_TokenVault *TokenVaultCaller) Claim(opts *bind.CallOpts, arg0 []byte) error {
	var out []interface{}
	__err := _TokenVault.contract.Call(opts, &out, "claim", arg0)

	if __err != nil {
		return __err
	}

	return __err

}

// Claim is a free data retrieval call binding the contract method 0xc63ff8dd.
//
// Solidity: function claim(bytes ) pure returns()
func (_TokenVault *TokenVaultBulkCaller) Claim(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, arg0 []byte) *error {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _TokenVault.contract.GenRequest(opts, "claim", arg0)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _TokenVault.contract.DecodeOutput(&out, rawOut, "claim")
		if err != nil {
			return err
		}

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return __err

}

// Claim is a free data retrieval call binding the contract method 0xc63ff8dd.
//
// Solidity: function claim(bytes ) pure returns()
func (_TokenVault *TokenVaultSession) Claim(arg0 []byte) error {
	return _TokenVault.Contract.Claim(&_TokenVault.CallOpts, arg0)
}

// Claim is a free data retrieval call binding the contract method 0xc63ff8dd.
//
// Solidity: function claim(bytes ) pure returns()
func (_TokenVault *TokenVaultCallerSession) Claim(arg0 []byte) error {
	return _TokenVault.Contract.Claim(&_TokenVault.CallOpts, arg0)
}

// DetectLocalEIP is a free data retrieval call binding the contract method 0x8c3225b3.
//
// Solidity: function detectLocalEIP(address indexContract) view returns(uint8)
func (_TokenVault *TokenVaultCaller) DetectLocalEIP(opts *bind.CallOpts, indexContract common.Address) (uint8, error) {
	var out []interface{}
	__err := _TokenVault.contract.Call(opts, &out, "detectLocalEIP", indexContract)

	if __err != nil {
		return *new(uint8), __err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, __err

}

// DetectLocalEIP is a free data retrieval call binding the contract method 0x8c3225b3.
//
// Solidity: function detectLocalEIP(address indexContract) view returns(uint8)
func (_TokenVault *TokenVaultBulkCaller) DetectLocalEIP(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, indexContract common.Address) (*uint8, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _TokenVault.contract.GenRequest(opts, "detectLocalEIP", indexContract)

	out0 := new(uint8)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _TokenVault.contract.DecodeOutput(&out, rawOut, "detectLocalEIP")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(uint8)).(*uint8)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// DetectLocalEIP is a free data retrieval call binding the contract method 0x8c3225b3.
//
// Solidity: function detectLocalEIP(address indexContract) view returns(uint8)
func (_TokenVault *TokenVaultSession) DetectLocalEIP(indexContract common.Address) (uint8, error) {
	return _TokenVault.Contract.DetectLocalEIP(&_TokenVault.CallOpts, indexContract)
}

// DetectLocalEIP is a free data retrieval call binding the contract method 0x8c3225b3.
//
// Solidity: function detectLocalEIP(address indexContract) view returns(uint8)
func (_TokenVault *TokenVaultCallerSession) DetectLocalEIP(indexContract common.Address) (uint8, error) {
	return _TokenVault.Contract.DetectLocalEIP(&_TokenVault.CallOpts, indexContract)
}

// GetArrivalInfo is a free data retrieval call binding the contract method 0x0dd643f3.
//
// Solidity: function getArrivalInfo(address index, uint256 chain, address peer) view returns((uint8,uint8,uint256,address,bool,uint8))
func (_TokenVault *TokenVaultCaller) GetArrivalInfo(opts *bind.CallOpts, index common.Address, chain *big.Int, peer common.Address) (RouterPeerInfo, error) {
	var out []interface{}
	__err := _TokenVault.contract.Call(opts, &out, "getArrivalInfo", index, chain, peer)

	if __err != nil {
		return *new(RouterPeerInfo), __err
	}

	out0 := *abi.ConvertType(out[0], new(RouterPeerInfo)).(*RouterPeerInfo)

	return out0, __err

}

// GetArrivalInfo is a free data retrieval call binding the contract method 0x0dd643f3.
//
// Solidity: function getArrivalInfo(address index, uint256 chain, address peer) view returns((uint8,uint8,uint256,address,bool,uint8))
func (_TokenVault *TokenVaultBulkCaller) GetArrivalInfo(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, index common.Address, chain *big.Int, peer common.Address) (*RouterPeerInfo, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _TokenVault.contract.GenRequest(opts, "getArrivalInfo", index, chain, peer)

	out0 := new(RouterPeerInfo)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _TokenVault.contract.DecodeOutput(&out, rawOut, "getArrivalInfo")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(RouterPeerInfo)).(*RouterPeerInfo)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// GetArrivalInfo is a free data retrieval call binding the contract method 0x0dd643f3.
//
// Solidity: function getArrivalInfo(address index, uint256 chain, address peer) view returns((uint8,uint8,uint256,address,bool,uint8))
func (_TokenVault *TokenVaultSession) GetArrivalInfo(index common.Address, chain *big.Int, peer common.Address) (RouterPeerInfo, error) {
	return _TokenVault.Contract.GetArrivalInfo(&_TokenVault.CallOpts, index, chain, peer)
}

// GetArrivalInfo is a free data retrieval call binding the contract method 0x0dd643f3.
//
// Solidity: function getArrivalInfo(address index, uint256 chain, address peer) view returns((uint8,uint8,uint256,address,bool,uint8))
func (_TokenVault *TokenVaultCallerSession) GetArrivalInfo(index common.Address, chain *big.Int, peer common.Address) (RouterPeerInfo, error) {
	return _TokenVault.Contract.GetArrivalInfo(&_TokenVault.CallOpts, index, chain, peer)
}

// GetDepartureInfo is a free data retrieval call binding the contract method 0x03610a5c.
//
// Solidity: function getDepartureInfo(address index, uint256 chain, address peer) view returns((uint8,uint8,uint256,address,bool,uint8))
func (_TokenVault *TokenVaultCaller) GetDepartureInfo(opts *bind.CallOpts, index common.Address, chain *big.Int, peer common.Address) (RouterPeerInfo, error) {
	var out []interface{}
	__err := _TokenVault.contract.Call(opts, &out, "getDepartureInfo", index, chain, peer)

	if __err != nil {
		return *new(RouterPeerInfo), __err
	}

	out0 := *abi.ConvertType(out[0], new(RouterPeerInfo)).(*RouterPeerInfo)

	return out0, __err

}

// GetDepartureInfo is a free data retrieval call binding the contract method 0x03610a5c.
//
// Solidity: function getDepartureInfo(address index, uint256 chain, address peer) view returns((uint8,uint8,uint256,address,bool,uint8))
func (_TokenVault *TokenVaultBulkCaller) GetDepartureInfo(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, index common.Address, chain *big.Int, peer common.Address) (*RouterPeerInfo, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _TokenVault.contract.GenRequest(opts, "getDepartureInfo", index, chain, peer)

	out0 := new(RouterPeerInfo)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _TokenVault.contract.DecodeOutput(&out, rawOut, "getDepartureInfo")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(RouterPeerInfo)).(*RouterPeerInfo)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// GetDepartureInfo is a free data retrieval call binding the contract method 0x03610a5c.
//
// Solidity: function getDepartureInfo(address index, uint256 chain, address peer) view returns((uint8,uint8,uint256,address,bool,uint8))
func (_TokenVault *TokenVaultSession) GetDepartureInfo(index common.Address, chain *big.Int, peer common.Address) (RouterPeerInfo, error) {
	return _TokenVault.Contract.GetDepartureInfo(&_TokenVault.CallOpts, index, chain, peer)
}

// GetDepartureInfo is a free data retrieval call binding the contract method 0x03610a5c.
//
// Solidity: function getDepartureInfo(address index, uint256 chain, address peer) view returns((uint8,uint8,uint256,address,bool,uint8))
func (_TokenVault *TokenVaultCallerSession) GetDepartureInfo(index common.Address, chain *big.Int, peer common.Address) (RouterPeerInfo, error) {
	return _TokenVault.Contract.GetDepartureInfo(&_TokenVault.CallOpts, index, chain, peer)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_TokenVault *TokenVaultCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	__err := _TokenVault.contract.Call(opts, &out, "getRoleAdmin", role)

	if __err != nil {
		return *new([32]byte), __err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, __err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_TokenVault *TokenVaultBulkCaller) GetRoleAdmin(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, role [32]byte) (*[32]byte, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _TokenVault.contract.GenRequest(opts, "getRoleAdmin", role)

	out0 := new([32]byte)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _TokenVault.contract.DecodeOutput(&out, rawOut, "getRoleAdmin")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_TokenVault *TokenVaultSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _TokenVault.Contract.GetRoleAdmin(&_TokenVault.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_TokenVault *TokenVaultCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _TokenVault.Contract.GetRoleAdmin(&_TokenVault.CallOpts, role)
}

// GetUserNextClaimNonce is a free data retrieval call binding the contract method 0x9aa4b2fd.
//
// Solidity: function getUserNextClaimNonce(address issuer, uint256 srcChainId) view returns(uint256)
func (_TokenVault *TokenVaultCaller) GetUserNextClaimNonce(opts *bind.CallOpts, issuer common.Address, srcChainId *big.Int) (*big.Int, error) {
	var out []interface{}
	__err := _TokenVault.contract.Call(opts, &out, "getUserNextClaimNonce", issuer, srcChainId)

	if __err != nil {
		return *new(*big.Int), __err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, __err

}

// GetUserNextClaimNonce is a free data retrieval call binding the contract method 0x9aa4b2fd.
//
// Solidity: function getUserNextClaimNonce(address issuer, uint256 srcChainId) view returns(uint256)
func (_TokenVault *TokenVaultBulkCaller) GetUserNextClaimNonce(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, issuer common.Address, srcChainId *big.Int) (**big.Int, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _TokenVault.contract.GenRequest(opts, "getUserNextClaimNonce", issuer, srcChainId)

	out0 := new(*big.Int)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _TokenVault.contract.DecodeOutput(&out, rawOut, "getUserNextClaimNonce")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// GetUserNextClaimNonce is a free data retrieval call binding the contract method 0x9aa4b2fd.
//
// Solidity: function getUserNextClaimNonce(address issuer, uint256 srcChainId) view returns(uint256)
func (_TokenVault *TokenVaultSession) GetUserNextClaimNonce(issuer common.Address, srcChainId *big.Int) (*big.Int, error) {
	return _TokenVault.Contract.GetUserNextClaimNonce(&_TokenVault.CallOpts, issuer, srcChainId)
}

// GetUserNextClaimNonce is a free data retrieval call binding the contract method 0x9aa4b2fd.
//
// Solidity: function getUserNextClaimNonce(address issuer, uint256 srcChainId) view returns(uint256)
func (_TokenVault *TokenVaultCallerSession) GetUserNextClaimNonce(issuer common.Address, srcChainId *big.Int) (*big.Int, error) {
	return _TokenVault.Contract.GetUserNextClaimNonce(&_TokenVault.CallOpts, issuer, srcChainId)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_TokenVault *TokenVaultCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	__err := _TokenVault.contract.Call(opts, &out, "hasRole", role, account)

	if __err != nil {
		return *new(bool), __err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, __err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_TokenVault *TokenVaultBulkCaller) HasRole(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, role [32]byte, account common.Address) (*bool, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _TokenVault.contract.GenRequest(opts, "hasRole", role, account)

	out0 := new(bool)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _TokenVault.contract.DecodeOutput(&out, rawOut, "hasRole")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(bool)).(*bool)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_TokenVault *TokenVaultSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _TokenVault.Contract.HasRole(&_TokenVault.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_TokenVault *TokenVaultCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _TokenVault.Contract.HasRole(&_TokenVault.CallOpts, role, account)
}

// ListArrivalChainIndex is a free data retrieval call binding the contract method 0x36cda99b.
//
// Solidity: function listArrivalChainIndex(address index, uint256 offset, uint256 size) view returns(uint256[], uint256 total)
func (_TokenVault *TokenVaultCaller) ListArrivalChainIndex(opts *bind.CallOpts, index common.Address, offset *big.Int, size *big.Int) ([]*big.Int, *big.Int, error) {
	var out []interface{}
	__err := _TokenVault.contract.Call(opts, &out, "listArrivalChainIndex", index, offset, size)

	if __err != nil {
		return *new([]*big.Int), *new(*big.Int), __err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, __err

}

// ListArrivalChainIndex is a free data retrieval call binding the contract method 0x36cda99b.
//
// Solidity: function listArrivalChainIndex(address index, uint256 offset, uint256 size) view returns(uint256[], uint256 total)
func (_TokenVault *TokenVaultBulkCaller) ListArrivalChainIndex(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, index common.Address, offset *big.Int, size *big.Int) (*[]*big.Int, **big.Int, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _TokenVault.contract.GenRequest(opts, "listArrivalChainIndex", index, offset, size)

	out0 := new([]*big.Int)
	out1 := new(*big.Int)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _TokenVault.contract.DecodeOutput(&out, rawOut, "listArrivalChainIndex")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
		*out1 = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, out1, __err

}

// ListArrivalChainIndex is a free data retrieval call binding the contract method 0x36cda99b.
//
// Solidity: function listArrivalChainIndex(address index, uint256 offset, uint256 size) view returns(uint256[], uint256 total)
func (_TokenVault *TokenVaultSession) ListArrivalChainIndex(index common.Address, offset *big.Int, size *big.Int) ([]*big.Int, *big.Int, error) {
	return _TokenVault.Contract.ListArrivalChainIndex(&_TokenVault.CallOpts, index, offset, size)
}

// ListArrivalChainIndex is a free data retrieval call binding the contract method 0x36cda99b.
//
// Solidity: function listArrivalChainIndex(address index, uint256 offset, uint256 size) view returns(uint256[], uint256 total)
func (_TokenVault *TokenVaultCallerSession) ListArrivalChainIndex(index common.Address, offset *big.Int, size *big.Int) ([]*big.Int, *big.Int, error) {
	return _TokenVault.Contract.ListArrivalChainIndex(&_TokenVault.CallOpts, index, offset, size)
}

// ListArrivalIndex is a free data retrieval call binding the contract method 0x7ef848c2.
//
// Solidity: function listArrivalIndex(uint256 offset, uint256 size) view returns(address[], uint256 total)
func (_TokenVault *TokenVaultCaller) ListArrivalIndex(opts *bind.CallOpts, offset *big.Int, size *big.Int) ([]common.Address, *big.Int, error) {
	var out []interface{}
	__err := _TokenVault.contract.Call(opts, &out, "listArrivalIndex", offset, size)

	if __err != nil {
		return *new([]common.Address), *new(*big.Int), __err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, __err

}

// ListArrivalIndex is a free data retrieval call binding the contract method 0x7ef848c2.
//
// Solidity: function listArrivalIndex(uint256 offset, uint256 size) view returns(address[], uint256 total)
func (_TokenVault *TokenVaultBulkCaller) ListArrivalIndex(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, offset *big.Int, size *big.Int) (*[]common.Address, **big.Int, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _TokenVault.contract.GenRequest(opts, "listArrivalIndex", offset, size)

	out0 := new([]common.Address)
	out1 := new(*big.Int)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _TokenVault.contract.DecodeOutput(&out, rawOut, "listArrivalIndex")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
		*out1 = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, out1, __err

}

// ListArrivalIndex is a free data retrieval call binding the contract method 0x7ef848c2.
//
// Solidity: function listArrivalIndex(uint256 offset, uint256 size) view returns(address[], uint256 total)
func (_TokenVault *TokenVaultSession) ListArrivalIndex(offset *big.Int, size *big.Int) ([]common.Address, *big.Int, error) {
	return _TokenVault.Contract.ListArrivalIndex(&_TokenVault.CallOpts, offset, size)
}

// ListArrivalIndex is a free data retrieval call binding the contract method 0x7ef848c2.
//
// Solidity: function listArrivalIndex(uint256 offset, uint256 size) view returns(address[], uint256 total)
func (_TokenVault *TokenVaultCallerSession) ListArrivalIndex(offset *big.Int, size *big.Int) ([]common.Address, *big.Int, error) {
	return _TokenVault.Contract.ListArrivalIndex(&_TokenVault.CallOpts, offset, size)
}

// ListArrivalPeerIndex is a free data retrieval call binding the contract method 0xa7b69cb5.
//
// Solidity: function listArrivalPeerIndex(address index, uint256 chain, uint256 offset, uint256 size) view returns(address[], uint256 total)
func (_TokenVault *TokenVaultCaller) ListArrivalPeerIndex(opts *bind.CallOpts, index common.Address, chain *big.Int, offset *big.Int, size *big.Int) ([]common.Address, *big.Int, error) {
	var out []interface{}
	__err := _TokenVault.contract.Call(opts, &out, "listArrivalPeerIndex", index, chain, offset, size)

	if __err != nil {
		return *new([]common.Address), *new(*big.Int), __err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, __err

}

// ListArrivalPeerIndex is a free data retrieval call binding the contract method 0xa7b69cb5.
//
// Solidity: function listArrivalPeerIndex(address index, uint256 chain, uint256 offset, uint256 size) view returns(address[], uint256 total)
func (_TokenVault *TokenVaultBulkCaller) ListArrivalPeerIndex(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, index common.Address, chain *big.Int, offset *big.Int, size *big.Int) (*[]common.Address, **big.Int, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _TokenVault.contract.GenRequest(opts, "listArrivalPeerIndex", index, chain, offset, size)

	out0 := new([]common.Address)
	out1 := new(*big.Int)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _TokenVault.contract.DecodeOutput(&out, rawOut, "listArrivalPeerIndex")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
		*out1 = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, out1, __err

}

// ListArrivalPeerIndex is a free data retrieval call binding the contract method 0xa7b69cb5.
//
// Solidity: function listArrivalPeerIndex(address index, uint256 chain, uint256 offset, uint256 size) view returns(address[], uint256 total)
func (_TokenVault *TokenVaultSession) ListArrivalPeerIndex(index common.Address, chain *big.Int, offset *big.Int, size *big.Int) ([]common.Address, *big.Int, error) {
	return _TokenVault.Contract.ListArrivalPeerIndex(&_TokenVault.CallOpts, index, chain, offset, size)
}

// ListArrivalPeerIndex is a free data retrieval call binding the contract method 0xa7b69cb5.
//
// Solidity: function listArrivalPeerIndex(address index, uint256 chain, uint256 offset, uint256 size) view returns(address[], uint256 total)
func (_TokenVault *TokenVaultCallerSession) ListArrivalPeerIndex(index common.Address, chain *big.Int, offset *big.Int, size *big.Int) ([]common.Address, *big.Int, error) {
	return _TokenVault.Contract.ListArrivalPeerIndex(&_TokenVault.CallOpts, index, chain, offset, size)
}

// ListDepartureChainIndex is a free data retrieval call binding the contract method 0x1ef9da61.
//
// Solidity: function listDepartureChainIndex(address index, uint256 offset, uint256 size) view returns(uint256[], uint256 total)
func (_TokenVault *TokenVaultCaller) ListDepartureChainIndex(opts *bind.CallOpts, index common.Address, offset *big.Int, size *big.Int) ([]*big.Int, *big.Int, error) {
	var out []interface{}
	__err := _TokenVault.contract.Call(opts, &out, "listDepartureChainIndex", index, offset, size)

	if __err != nil {
		return *new([]*big.Int), *new(*big.Int), __err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, __err

}

// ListDepartureChainIndex is a free data retrieval call binding the contract method 0x1ef9da61.
//
// Solidity: function listDepartureChainIndex(address index, uint256 offset, uint256 size) view returns(uint256[], uint256 total)
func (_TokenVault *TokenVaultBulkCaller) ListDepartureChainIndex(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, index common.Address, offset *big.Int, size *big.Int) (*[]*big.Int, **big.Int, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _TokenVault.contract.GenRequest(opts, "listDepartureChainIndex", index, offset, size)

	out0 := new([]*big.Int)
	out1 := new(*big.Int)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _TokenVault.contract.DecodeOutput(&out, rawOut, "listDepartureChainIndex")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
		*out1 = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, out1, __err

}

// ListDepartureChainIndex is a free data retrieval call binding the contract method 0x1ef9da61.
//
// Solidity: function listDepartureChainIndex(address index, uint256 offset, uint256 size) view returns(uint256[], uint256 total)
func (_TokenVault *TokenVaultSession) ListDepartureChainIndex(index common.Address, offset *big.Int, size *big.Int) ([]*big.Int, *big.Int, error) {
	return _TokenVault.Contract.ListDepartureChainIndex(&_TokenVault.CallOpts, index, offset, size)
}

// ListDepartureChainIndex is a free data retrieval call binding the contract method 0x1ef9da61.
//
// Solidity: function listDepartureChainIndex(address index, uint256 offset, uint256 size) view returns(uint256[], uint256 total)
func (_TokenVault *TokenVaultCallerSession) ListDepartureChainIndex(index common.Address, offset *big.Int, size *big.Int) ([]*big.Int, *big.Int, error) {
	return _TokenVault.Contract.ListDepartureChainIndex(&_TokenVault.CallOpts, index, offset, size)
}

// ListDepartureIndex is a free data retrieval call binding the contract method 0x1a10c5fe.
//
// Solidity: function listDepartureIndex(uint256 offset, uint256 size) view returns(address[], uint256 total)
func (_TokenVault *TokenVaultCaller) ListDepartureIndex(opts *bind.CallOpts, offset *big.Int, size *big.Int) ([]common.Address, *big.Int, error) {
	var out []interface{}
	__err := _TokenVault.contract.Call(opts, &out, "listDepartureIndex", offset, size)

	if __err != nil {
		return *new([]common.Address), *new(*big.Int), __err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, __err

}

// ListDepartureIndex is a free data retrieval call binding the contract method 0x1a10c5fe.
//
// Solidity: function listDepartureIndex(uint256 offset, uint256 size) view returns(address[], uint256 total)
func (_TokenVault *TokenVaultBulkCaller) ListDepartureIndex(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, offset *big.Int, size *big.Int) (*[]common.Address, **big.Int, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _TokenVault.contract.GenRequest(opts, "listDepartureIndex", offset, size)

	out0 := new([]common.Address)
	out1 := new(*big.Int)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _TokenVault.contract.DecodeOutput(&out, rawOut, "listDepartureIndex")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
		*out1 = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, out1, __err

}

// ListDepartureIndex is a free data retrieval call binding the contract method 0x1a10c5fe.
//
// Solidity: function listDepartureIndex(uint256 offset, uint256 size) view returns(address[], uint256 total)
func (_TokenVault *TokenVaultSession) ListDepartureIndex(offset *big.Int, size *big.Int) ([]common.Address, *big.Int, error) {
	return _TokenVault.Contract.ListDepartureIndex(&_TokenVault.CallOpts, offset, size)
}

// ListDepartureIndex is a free data retrieval call binding the contract method 0x1a10c5fe.
//
// Solidity: function listDepartureIndex(uint256 offset, uint256 size) view returns(address[], uint256 total)
func (_TokenVault *TokenVaultCallerSession) ListDepartureIndex(offset *big.Int, size *big.Int) ([]common.Address, *big.Int, error) {
	return _TokenVault.Contract.ListDepartureIndex(&_TokenVault.CallOpts, offset, size)
}

// ListDeparturePeerIndex is a free data retrieval call binding the contract method 0x5e2fdcbc.
//
// Solidity: function listDeparturePeerIndex(address index, uint256 chain, uint256 offset, uint256 size) view returns(address[], uint256 total)
func (_TokenVault *TokenVaultCaller) ListDeparturePeerIndex(opts *bind.CallOpts, index common.Address, chain *big.Int, offset *big.Int, size *big.Int) ([]common.Address, *big.Int, error) {
	var out []interface{}
	__err := _TokenVault.contract.Call(opts, &out, "listDeparturePeerIndex", index, chain, offset, size)

	if __err != nil {
		return *new([]common.Address), *new(*big.Int), __err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, __err

}

// ListDeparturePeerIndex is a free data retrieval call binding the contract method 0x5e2fdcbc.
//
// Solidity: function listDeparturePeerIndex(address index, uint256 chain, uint256 offset, uint256 size) view returns(address[], uint256 total)
func (_TokenVault *TokenVaultBulkCaller) ListDeparturePeerIndex(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, index common.Address, chain *big.Int, offset *big.Int, size *big.Int) (*[]common.Address, **big.Int, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _TokenVault.contract.GenRequest(opts, "listDeparturePeerIndex", index, chain, offset, size)

	out0 := new([]common.Address)
	out1 := new(*big.Int)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _TokenVault.contract.DecodeOutput(&out, rawOut, "listDeparturePeerIndex")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
		*out1 = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, out1, __err

}

// ListDeparturePeerIndex is a free data retrieval call binding the contract method 0x5e2fdcbc.
//
// Solidity: function listDeparturePeerIndex(address index, uint256 chain, uint256 offset, uint256 size) view returns(address[], uint256 total)
func (_TokenVault *TokenVaultSession) ListDeparturePeerIndex(index common.Address, chain *big.Int, offset *big.Int, size *big.Int) ([]common.Address, *big.Int, error) {
	return _TokenVault.Contract.ListDeparturePeerIndex(&_TokenVault.CallOpts, index, chain, offset, size)
}

// ListDeparturePeerIndex is a free data retrieval call binding the contract method 0x5e2fdcbc.
//
// Solidity: function listDeparturePeerIndex(address index, uint256 chain, uint256 offset, uint256 size) view returns(address[], uint256 total)
func (_TokenVault *TokenVaultCallerSession) ListDeparturePeerIndex(index common.Address, chain *big.Int, offset *big.Int, size *big.Int) ([]common.Address, *big.Int, error) {
	return _TokenVault.Contract.ListDeparturePeerIndex(&_TokenVault.CallOpts, index, chain, offset, size)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TokenVault *TokenVaultCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	__err := _TokenVault.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if __err != nil {
		return *new(bool), __err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, __err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TokenVault *TokenVaultBulkCaller) SupportsInterface(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, interfaceId [4]byte) (*bool, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _TokenVault.contract.GenRequest(opts, "supportsInterface", interfaceId)

	out0 := new(bool)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _TokenVault.contract.DecodeOutput(&out, rawOut, "supportsInterface")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(bool)).(*bool)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TokenVault *TokenVaultSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TokenVault.Contract.SupportsInterface(&_TokenVault.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TokenVault *TokenVaultCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TokenVault.Contract.SupportsInterface(&_TokenVault.CallOpts, interfaceId)
}

// BatchTransferFrom is a paid mutator transaction binding the contract method 0xc11bec28.
//
// Solidity: function batchTransferFrom(uint256 toChainId, address targetContract, address assetContract, uint256[] tokenIds) returns()
func (_TokenVault *TokenVaultTransactor) BatchTransferFrom(opts *bind.TransactOpts, toChainId *big.Int, targetContract common.Address, assetContract common.Address, tokenIds []*big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.contract.Transact(opts, "batchTransferFrom", toChainId, targetContract, assetContract, tokenIds)
}

// BatchTransferFrom is a paid mutator transaction binding the contract method 0xc11bec28.
//
// Solidity: function batchTransferFrom(uint256 toChainId, address targetContract, address assetContract, uint256[] tokenIds) returns()
func (_TokenVault *TokenVaultBulkTransactor) BatchTransferFrom(opts *bind.TransactOpts, toChainId *big.Int, targetContract common.Address, assetContract common.Address, tokenIds []*big.Int) types.UnsignedTransaction {
	return _TokenVault.contract.GenUnsignedTransaction(opts, "batchTransferFrom", toChainId, targetContract, assetContract, tokenIds)
}

// BatchTransferFrom is a paid mutator transaction binding the contract method 0xc11bec28.
//
// Solidity: function batchTransferFrom(uint256 toChainId, address targetContract, address assetContract, uint256[] tokenIds) returns()
func (_TokenVault *TokenVaultSession) BatchTransferFrom(toChainId *big.Int, targetContract common.Address, assetContract common.Address, tokenIds []*big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.BatchTransferFrom(&_TokenVault.TransactOpts, toChainId, targetContract, assetContract, tokenIds)
}

// BatchTransferFrom is a paid mutator transaction binding the contract method 0xc11bec28.
//
// Solidity: function batchTransferFrom(uint256 toChainId, address targetContract, address assetContract, uint256[] tokenIds) returns()
func (_TokenVault *TokenVaultTransactorSession) BatchTransferFrom(toChainId *big.Int, targetContract common.Address, assetContract common.Address, tokenIds []*big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.BatchTransferFrom(&_TokenVault.TransactOpts, toChainId, targetContract, assetContract, tokenIds)
}

// ClaimByAdmin is a paid mutator transaction binding the contract method 0xc4eb2460.
//
// Solidity: function claimByAdmin(uint256 srcChainId, address srcContract, address localContract, uint256[] tokenIds, uint256[] amounts, string[] uris, address issuer, uint256 userNonce_) returns()
func (_TokenVault *TokenVaultTransactor) ClaimByAdmin(opts *bind.TransactOpts, srcChainId *big.Int, srcContract common.Address, localContract common.Address, tokenIds []*big.Int, amounts []*big.Int, uris []string, issuer common.Address, userNonce_ *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.contract.Transact(opts, "claimByAdmin", srcChainId, srcContract, localContract, tokenIds, amounts, uris, issuer, userNonce_)
}

// ClaimByAdmin is a paid mutator transaction binding the contract method 0xc4eb2460.
//
// Solidity: function claimByAdmin(uint256 srcChainId, address srcContract, address localContract, uint256[] tokenIds, uint256[] amounts, string[] uris, address issuer, uint256 userNonce_) returns()
func (_TokenVault *TokenVaultBulkTransactor) ClaimByAdmin(opts *bind.TransactOpts, srcChainId *big.Int, srcContract common.Address, localContract common.Address, tokenIds []*big.Int, amounts []*big.Int, uris []string, issuer common.Address, userNonce_ *big.Int) types.UnsignedTransaction {
	return _TokenVault.contract.GenUnsignedTransaction(opts, "claimByAdmin", srcChainId, srcContract, localContract, tokenIds, amounts, uris, issuer, userNonce_)
}

// ClaimByAdmin is a paid mutator transaction binding the contract method 0xc4eb2460.
//
// Solidity: function claimByAdmin(uint256 srcChainId, address srcContract, address localContract, uint256[] tokenIds, uint256[] amounts, string[] uris, address issuer, uint256 userNonce_) returns()
func (_TokenVault *TokenVaultSession) ClaimByAdmin(srcChainId *big.Int, srcContract common.Address, localContract common.Address, tokenIds []*big.Int, amounts []*big.Int, uris []string, issuer common.Address, userNonce_ *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.ClaimByAdmin(&_TokenVault.TransactOpts, srcChainId, srcContract, localContract, tokenIds, amounts, uris, issuer, userNonce_)
}

// ClaimByAdmin is a paid mutator transaction binding the contract method 0xc4eb2460.
//
// Solidity: function claimByAdmin(uint256 srcChainId, address srcContract, address localContract, uint256[] tokenIds, uint256[] amounts, string[] uris, address issuer, uint256 userNonce_) returns()
func (_TokenVault *TokenVaultTransactorSession) ClaimByAdmin(srcChainId *big.Int, srcContract common.Address, localContract common.Address, tokenIds []*big.Int, amounts []*big.Int, uris []string, issuer common.Address, userNonce_ *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.ClaimByAdmin(&_TokenVault.TransactOpts, srcChainId, srcContract, localContract, tokenIds, amounts, uris, issuer, userNonce_)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_TokenVault *TokenVaultTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_TokenVault *TokenVaultBulkTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) types.UnsignedTransaction {
	return _TokenVault.contract.GenUnsignedTransaction(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_TokenVault *TokenVaultSession) GrantRole(role [32]byte, account common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.GrantRole(&_TokenVault.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_TokenVault *TokenVaultTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.GrantRole(&_TokenVault.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_TokenVault *TokenVaultTransactor) Initialize(opts *bind.TransactOpts) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_TokenVault *TokenVaultBulkTransactor) Initialize(opts *bind.TransactOpts) types.UnsignedTransaction {
	return _TokenVault.contract.GenUnsignedTransaction(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_TokenVault *TokenVaultSession) Initialize() (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.Initialize(&_TokenVault.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_TokenVault *TokenVaultTransactorSession) Initialize() (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.Initialize(&_TokenVault.TransactOpts)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address from, uint256[] ids, uint256[] values, bytes data) returns(bytes4)
func (_TokenVault *TokenVaultTransactor) OnERC1155BatchReceived(opts *bind.TransactOpts, arg0 common.Address, from common.Address, ids []*big.Int, values []*big.Int, data []byte) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.contract.Transact(opts, "onERC1155BatchReceived", arg0, from, ids, values, data)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address from, uint256[] ids, uint256[] values, bytes data) returns(bytes4)
func (_TokenVault *TokenVaultBulkTransactor) OnERC1155BatchReceived(opts *bind.TransactOpts, arg0 common.Address, from common.Address, ids []*big.Int, values []*big.Int, data []byte) types.UnsignedTransaction {
	return _TokenVault.contract.GenUnsignedTransaction(opts, "onERC1155BatchReceived", arg0, from, ids, values, data)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address from, uint256[] ids, uint256[] values, bytes data) returns(bytes4)
func (_TokenVault *TokenVaultSession) OnERC1155BatchReceived(arg0 common.Address, from common.Address, ids []*big.Int, values []*big.Int, data []byte) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.OnERC1155BatchReceived(&_TokenVault.TransactOpts, arg0, from, ids, values, data)
}

// OnERC1155BatchReceived is a paid mutator transaction binding the contract method 0xbc197c81.
//
// Solidity: function onERC1155BatchReceived(address , address from, uint256[] ids, uint256[] values, bytes data) returns(bytes4)
func (_TokenVault *TokenVaultTransactorSession) OnERC1155BatchReceived(arg0 common.Address, from common.Address, ids []*big.Int, values []*big.Int, data []byte) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.OnERC1155BatchReceived(&_TokenVault.TransactOpts, arg0, from, ids, values, data)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address from, uint256 id, uint256 value, bytes data) returns(bytes4)
func (_TokenVault *TokenVaultTransactor) OnERC1155Received(opts *bind.TransactOpts, arg0 common.Address, from common.Address, id *big.Int, value *big.Int, data []byte) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.contract.Transact(opts, "onERC1155Received", arg0, from, id, value, data)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address from, uint256 id, uint256 value, bytes data) returns(bytes4)
func (_TokenVault *TokenVaultBulkTransactor) OnERC1155Received(opts *bind.TransactOpts, arg0 common.Address, from common.Address, id *big.Int, value *big.Int, data []byte) types.UnsignedTransaction {
	return _TokenVault.contract.GenUnsignedTransaction(opts, "onERC1155Received", arg0, from, id, value, data)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address from, uint256 id, uint256 value, bytes data) returns(bytes4)
func (_TokenVault *TokenVaultSession) OnERC1155Received(arg0 common.Address, from common.Address, id *big.Int, value *big.Int, data []byte) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.OnERC1155Received(&_TokenVault.TransactOpts, arg0, from, id, value, data)
}

// OnERC1155Received is a paid mutator transaction binding the contract method 0xf23a6e61.
//
// Solidity: function onERC1155Received(address , address from, uint256 id, uint256 value, bytes data) returns(bytes4)
func (_TokenVault *TokenVaultTransactorSession) OnERC1155Received(arg0 common.Address, from common.Address, id *big.Int, value *big.Int, data []byte) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.OnERC1155Received(&_TokenVault.TransactOpts, arg0, from, id, value, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address from, uint256 tokenId, bytes data) returns(bytes4)
func (_TokenVault *TokenVaultTransactor) OnERC721Received(opts *bind.TransactOpts, arg0 common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.contract.Transact(opts, "onERC721Received", arg0, from, tokenId, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address from, uint256 tokenId, bytes data) returns(bytes4)
func (_TokenVault *TokenVaultBulkTransactor) OnERC721Received(opts *bind.TransactOpts, arg0 common.Address, from common.Address, tokenId *big.Int, data []byte) types.UnsignedTransaction {
	return _TokenVault.contract.GenUnsignedTransaction(opts, "onERC721Received", arg0, from, tokenId, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address from, uint256 tokenId, bytes data) returns(bytes4)
func (_TokenVault *TokenVaultSession) OnERC721Received(arg0 common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.OnERC721Received(&_TokenVault.TransactOpts, arg0, from, tokenId, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address , address from, uint256 tokenId, bytes data) returns(bytes4)
func (_TokenVault *TokenVaultTransactorSession) OnERC721Received(arg0 common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.OnERC721Received(&_TokenVault.TransactOpts, arg0, from, tokenId, data)
}

// RegisterArrival is a paid mutator transaction binding the contract method 0x364f2de0.
//
// Solidity: function registerArrival(address remoteContract, uint256 remoteChainId, uint8 op, uint8 uriMode, address localContract) returns()
func (_TokenVault *TokenVaultTransactor) RegisterArrival(opts *bind.TransactOpts, remoteContract common.Address, remoteChainId *big.Int, op uint8, uriMode uint8, localContract common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.contract.Transact(opts, "registerArrival", remoteContract, remoteChainId, op, uriMode, localContract)
}

// RegisterArrival is a paid mutator transaction binding the contract method 0x364f2de0.
//
// Solidity: function registerArrival(address remoteContract, uint256 remoteChainId, uint8 op, uint8 uriMode, address localContract) returns()
func (_TokenVault *TokenVaultBulkTransactor) RegisterArrival(opts *bind.TransactOpts, remoteContract common.Address, remoteChainId *big.Int, op uint8, uriMode uint8, localContract common.Address) types.UnsignedTransaction {
	return _TokenVault.contract.GenUnsignedTransaction(opts, "registerArrival", remoteContract, remoteChainId, op, uriMode, localContract)
}

// RegisterArrival is a paid mutator transaction binding the contract method 0x364f2de0.
//
// Solidity: function registerArrival(address remoteContract, uint256 remoteChainId, uint8 op, uint8 uriMode, address localContract) returns()
func (_TokenVault *TokenVaultSession) RegisterArrival(remoteContract common.Address, remoteChainId *big.Int, op uint8, uriMode uint8, localContract common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.RegisterArrival(&_TokenVault.TransactOpts, remoteContract, remoteChainId, op, uriMode, localContract)
}

// RegisterArrival is a paid mutator transaction binding the contract method 0x364f2de0.
//
// Solidity: function registerArrival(address remoteContract, uint256 remoteChainId, uint8 op, uint8 uriMode, address localContract) returns()
func (_TokenVault *TokenVaultTransactorSession) RegisterArrival(remoteContract common.Address, remoteChainId *big.Int, op uint8, uriMode uint8, localContract common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.RegisterArrival(&_TokenVault.TransactOpts, remoteContract, remoteChainId, op, uriMode, localContract)
}

// RegisterDeparture is a paid mutator transaction binding the contract method 0x03cda6e0.
//
// Solidity: function registerDeparture(address local, uint256 targetChainId, uint8 op, uint8 uriMode, address remoteContract) returns()
func (_TokenVault *TokenVaultTransactor) RegisterDeparture(opts *bind.TransactOpts, local common.Address, targetChainId *big.Int, op uint8, uriMode uint8, remoteContract common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.contract.Transact(opts, "registerDeparture", local, targetChainId, op, uriMode, remoteContract)
}

// RegisterDeparture is a paid mutator transaction binding the contract method 0x03cda6e0.
//
// Solidity: function registerDeparture(address local, uint256 targetChainId, uint8 op, uint8 uriMode, address remoteContract) returns()
func (_TokenVault *TokenVaultBulkTransactor) RegisterDeparture(opts *bind.TransactOpts, local common.Address, targetChainId *big.Int, op uint8, uriMode uint8, remoteContract common.Address) types.UnsignedTransaction {
	return _TokenVault.contract.GenUnsignedTransaction(opts, "registerDeparture", local, targetChainId, op, uriMode, remoteContract)
}

// RegisterDeparture is a paid mutator transaction binding the contract method 0x03cda6e0.
//
// Solidity: function registerDeparture(address local, uint256 targetChainId, uint8 op, uint8 uriMode, address remoteContract) returns()
func (_TokenVault *TokenVaultSession) RegisterDeparture(local common.Address, targetChainId *big.Int, op uint8, uriMode uint8, remoteContract common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.RegisterDeparture(&_TokenVault.TransactOpts, local, targetChainId, op, uriMode, remoteContract)
}

// RegisterDeparture is a paid mutator transaction binding the contract method 0x03cda6e0.
//
// Solidity: function registerDeparture(address local, uint256 targetChainId, uint8 op, uint8 uriMode, address remoteContract) returns()
func (_TokenVault *TokenVaultTransactorSession) RegisterDeparture(local common.Address, targetChainId *big.Int, op uint8, uriMode uint8, remoteContract common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.RegisterDeparture(&_TokenVault.TransactOpts, local, targetChainId, op, uriMode, remoteContract)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_TokenVault *TokenVaultTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_TokenVault *TokenVaultBulkTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) types.UnsignedTransaction {
	return _TokenVault.contract.GenUnsignedTransaction(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_TokenVault *TokenVaultSession) RenounceRole(role [32]byte, account common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.RenounceRole(&_TokenVault.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_TokenVault *TokenVaultTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.RenounceRole(&_TokenVault.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_TokenVault *TokenVaultTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_TokenVault *TokenVaultBulkTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) types.UnsignedTransaction {
	return _TokenVault.contract.GenUnsignedTransaction(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_TokenVault *TokenVaultSession) RevokeRole(role [32]byte, account common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.RevokeRole(&_TokenVault.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_TokenVault *TokenVaultTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _TokenVault.Contract.RevokeRole(&_TokenVault.TransactOpts, role, account)
}

// TokenVaultArrivalConfiguredIterator is returned from FilterArrivalConfigured and is used to iterate over the raw logs and unpacked data for ArrivalConfigured events raised by the TokenVault contract.
type TokenVaultArrivalConfiguredIterator struct {
	Event *TokenVaultArrivalConfigured // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenVaultArrivalConfiguredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenVaultArrivalConfigured)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	if it.sub == nil {
		it.done = true
		return it.Next()
	}

	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenVaultArrivalConfigured)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenVaultArrivalConfiguredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenVaultArrivalConfiguredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenVaultArrivalConfigured represents a ArrivalConfigured event raised by the TokenVault contract.
type TokenVaultArrivalConfigured struct {
	RemoteContract common.Address
	RemoteChainId  *big.Int
	LocalContract  common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// TokenVaultArrivalConfiguredOrChainReorg represents a ArrivalConfigured subscription event raised by the TokenVault contract.
type TokenVaultArrivalConfiguredOrChainReorg struct {
	Event      *TokenVaultArrivalConfigured
	ChainReorg *types.ChainReorg
}

// FilterArrivalConfigured is a free log retrieval operation binding the contract event 0xe9fb7d7e00118c8e027ac046db156d6e48ef637bd79b3d7fa30708d7b3b5e58b.
//
// Solidity: event ArrivalConfigured(address indexed remoteContract, uint256 indexed remoteChainId, address localContract)
func (_TokenVault *TokenVaultFilterer) FilterArrivalConfigured(opts *bind.FilterOpts, remoteContract []common.Address, remoteChainId []*big.Int) (*TokenVaultArrivalConfiguredIterator, error) {

	var remoteContractRule []interface{}
	for _, remoteContractItem := range remoteContract {
		remoteContractRule = append(remoteContractRule, remoteContractItem)
	}
	var remoteChainIdRule []interface{}
	for _, remoteChainIdItem := range remoteChainId {
		remoteChainIdRule = append(remoteChainIdRule, remoteChainIdItem)
	}

	logs, err := _TokenVault.contract.FilterLogs(opts, "ArrivalConfigured", remoteContractRule, remoteChainIdRule)
	if err != nil {
		return nil, err
	}
	return &TokenVaultArrivalConfiguredIterator{contract: _TokenVault.contract, event: "ArrivalConfigured", logs: logs}, nil
}

// WatchArrivalConfigured is a free log subscription operation binding the contract event 0xe9fb7d7e00118c8e027ac046db156d6e48ef637bd79b3d7fa30708d7b3b5e58b.
//
// Solidity: event ArrivalConfigured(address indexed remoteContract, uint256 indexed remoteChainId, address localContract)
func (_TokenVault *TokenVaultFilterer) WatchArrivalConfigured(opts *bind.WatchOpts, sink chan<- *TokenVaultArrivalConfiguredOrChainReorg, remoteContract []common.Address, remoteChainId []*big.Int) (event.Subscription, error) {

	var remoteContractRule []interface{}
	for _, remoteContractItem := range remoteContract {
		remoteContractRule = append(remoteContractRule, remoteContractItem)
	}
	var remoteChainIdRule []interface{}
	for _, remoteChainIdItem := range remoteChainId {
		remoteChainIdRule = append(remoteChainIdRule, remoteChainIdItem)
	}

	logs, sub, err := _TokenVault.contract.WatchLogs(opts, "ArrivalConfigured", remoteContractRule, remoteChainIdRule)
	if err != nil {
		return nil, err
	}

	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenVaultArrivalConfiguredOrChainReorg)
				event.Event = new(TokenVaultArrivalConfigured)

				if log.ChainReorg == nil {
					if err := _TokenVault.contract.UnpackLog(event.Event, "ArrivalConfigured", *log.Log); err != nil {
						return err
					}
					event.Event.Raw = *log.Log
				} else {
					event.ChainReorg = log.ChainReorg
				}

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseArrivalConfigured is a log parse operation binding the contract event 0xe9fb7d7e00118c8e027ac046db156d6e48ef637bd79b3d7fa30708d7b3b5e58b.
//
// Solidity: event ArrivalConfigured(address indexed remoteContract, uint256 indexed remoteChainId, address localContract)
func (_TokenVault *TokenVaultFilterer) ParseArrivalConfigured(log types.Log) (*TokenVaultArrivalConfigured, error) {
	event := new(TokenVaultArrivalConfigured)
	if err := _TokenVault.contract.UnpackLog(event, "ArrivalConfigured", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenVaultCrossRequestIterator is returned from FilterCrossRequest and is used to iterate over the raw logs and unpacked data for CrossRequest events raised by the TokenVault contract.
type TokenVaultCrossRequestIterator struct {
	Event *TokenVaultCrossRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenVaultCrossRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenVaultCrossRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	if it.sub == nil {
		it.done = true
		return it.Next()
	}

	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenVaultCrossRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenVaultCrossRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenVaultCrossRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenVaultCrossRequest represents a CrossRequest event raised by the TokenVault contract.
type TokenVaultCrossRequest struct {
	Asset          common.Address
	From           common.Address
	TokenIds       []*big.Int
	Amounts        []*big.Int
	Uris           []string
	ToChainId      *big.Int
	TargetContract common.Address
	UserNonce      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// TokenVaultCrossRequestOrChainReorg represents a CrossRequest subscription event raised by the TokenVault contract.
type TokenVaultCrossRequestOrChainReorg struct {
	Event      *TokenVaultCrossRequest
	ChainReorg *types.ChainReorg
}

// FilterCrossRequest is a free log retrieval operation binding the contract event 0x3863b4c2b672e3221642422fc9637df01babed1d750409520a373b4a787afc59.
//
// Solidity: event CrossRequest(address indexed asset, address indexed from, uint256[] tokenIds, uint256[] amounts, string[] uris, uint256 toChainId, address targetContract, uint256 userNonce)
func (_TokenVault *TokenVaultFilterer) FilterCrossRequest(opts *bind.FilterOpts, asset []common.Address, from []common.Address) (*TokenVaultCrossRequestIterator, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, err := _TokenVault.contract.FilterLogs(opts, "CrossRequest", assetRule, fromRule)
	if err != nil {
		return nil, err
	}
	return &TokenVaultCrossRequestIterator{contract: _TokenVault.contract, event: "CrossRequest", logs: logs}, nil
}

// WatchCrossRequest is a free log subscription operation binding the contract event 0x3863b4c2b672e3221642422fc9637df01babed1d750409520a373b4a787afc59.
//
// Solidity: event CrossRequest(address indexed asset, address indexed from, uint256[] tokenIds, uint256[] amounts, string[] uris, uint256 toChainId, address targetContract, uint256 userNonce)
func (_TokenVault *TokenVaultFilterer) WatchCrossRequest(opts *bind.WatchOpts, sink chan<- *TokenVaultCrossRequestOrChainReorg, asset []common.Address, from []common.Address) (event.Subscription, error) {

	var assetRule []interface{}
	for _, assetItem := range asset {
		assetRule = append(assetRule, assetItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}

	logs, sub, err := _TokenVault.contract.WatchLogs(opts, "CrossRequest", assetRule, fromRule)
	if err != nil {
		return nil, err
	}

	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenVaultCrossRequestOrChainReorg)
				event.Event = new(TokenVaultCrossRequest)

				if log.ChainReorg == nil {
					if err := _TokenVault.contract.UnpackLog(event.Event, "CrossRequest", *log.Log); err != nil {
						return err
					}
					event.Event.Raw = *log.Log
				} else {
					event.ChainReorg = log.ChainReorg
				}

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCrossRequest is a log parse operation binding the contract event 0x3863b4c2b672e3221642422fc9637df01babed1d750409520a373b4a787afc59.
//
// Solidity: event CrossRequest(address indexed asset, address indexed from, uint256[] tokenIds, uint256[] amounts, string[] uris, uint256 toChainId, address targetContract, uint256 userNonce)
func (_TokenVault *TokenVaultFilterer) ParseCrossRequest(log types.Log) (*TokenVaultCrossRequest, error) {
	event := new(TokenVaultCrossRequest)
	if err := _TokenVault.contract.UnpackLog(event, "CrossRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenVaultDepartureConfiguredIterator is returned from FilterDepartureConfigured and is used to iterate over the raw logs and unpacked data for DepartureConfigured events raised by the TokenVault contract.
type TokenVaultDepartureConfiguredIterator struct {
	Event *TokenVaultDepartureConfigured // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenVaultDepartureConfiguredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenVaultDepartureConfigured)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	if it.sub == nil {
		it.done = true
		return it.Next()
	}

	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenVaultDepartureConfigured)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenVaultDepartureConfiguredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenVaultDepartureConfiguredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenVaultDepartureConfigured represents a DepartureConfigured event raised by the TokenVault contract.
type TokenVaultDepartureConfigured struct {
	Local          common.Address
	TargetChainId  *big.Int
	RemoteContract common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// TokenVaultDepartureConfiguredOrChainReorg represents a DepartureConfigured subscription event raised by the TokenVault contract.
type TokenVaultDepartureConfiguredOrChainReorg struct {
	Event      *TokenVaultDepartureConfigured
	ChainReorg *types.ChainReorg
}

// FilterDepartureConfigured is a free log retrieval operation binding the contract event 0x0e5a0f5238edad743f0bbb7140294ec2214d83e62fc9a2816d3f79163981cb53.
//
// Solidity: event DepartureConfigured(address indexed local, uint256 indexed targetChainId, address remoteContract)
func (_TokenVault *TokenVaultFilterer) FilterDepartureConfigured(opts *bind.FilterOpts, local []common.Address, targetChainId []*big.Int) (*TokenVaultDepartureConfiguredIterator, error) {

	var localRule []interface{}
	for _, localItem := range local {
		localRule = append(localRule, localItem)
	}
	var targetChainIdRule []interface{}
	for _, targetChainIdItem := range targetChainId {
		targetChainIdRule = append(targetChainIdRule, targetChainIdItem)
	}

	logs, err := _TokenVault.contract.FilterLogs(opts, "DepartureConfigured", localRule, targetChainIdRule)
	if err != nil {
		return nil, err
	}
	return &TokenVaultDepartureConfiguredIterator{contract: _TokenVault.contract, event: "DepartureConfigured", logs: logs}, nil
}

// WatchDepartureConfigured is a free log subscription operation binding the contract event 0x0e5a0f5238edad743f0bbb7140294ec2214d83e62fc9a2816d3f79163981cb53.
//
// Solidity: event DepartureConfigured(address indexed local, uint256 indexed targetChainId, address remoteContract)
func (_TokenVault *TokenVaultFilterer) WatchDepartureConfigured(opts *bind.WatchOpts, sink chan<- *TokenVaultDepartureConfiguredOrChainReorg, local []common.Address, targetChainId []*big.Int) (event.Subscription, error) {

	var localRule []interface{}
	for _, localItem := range local {
		localRule = append(localRule, localItem)
	}
	var targetChainIdRule []interface{}
	for _, targetChainIdItem := range targetChainId {
		targetChainIdRule = append(targetChainIdRule, targetChainIdItem)
	}

	logs, sub, err := _TokenVault.contract.WatchLogs(opts, "DepartureConfigured", localRule, targetChainIdRule)
	if err != nil {
		return nil, err
	}

	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenVaultDepartureConfiguredOrChainReorg)
				event.Event = new(TokenVaultDepartureConfigured)

				if log.ChainReorg == nil {
					if err := _TokenVault.contract.UnpackLog(event.Event, "DepartureConfigured", *log.Log); err != nil {
						return err
					}
					event.Event.Raw = *log.Log
				} else {
					event.ChainReorg = log.ChainReorg
				}

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDepartureConfigured is a log parse operation binding the contract event 0x0e5a0f5238edad743f0bbb7140294ec2214d83e62fc9a2816d3f79163981cb53.
//
// Solidity: event DepartureConfigured(address indexed local, uint256 indexed targetChainId, address remoteContract)
func (_TokenVault *TokenVaultFilterer) ParseDepartureConfigured(log types.Log) (*TokenVaultDepartureConfigured, error) {
	event := new(TokenVaultDepartureConfigured)
	if err := _TokenVault.contract.UnpackLog(event, "DepartureConfigured", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenVaultRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the TokenVault contract.
type TokenVaultRoleAdminChangedIterator struct {
	Event *TokenVaultRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenVaultRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenVaultRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	if it.sub == nil {
		it.done = true
		return it.Next()
	}

	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenVaultRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenVaultRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenVaultRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenVaultRoleAdminChanged represents a RoleAdminChanged event raised by the TokenVault contract.
type TokenVaultRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// TokenVaultRoleAdminChangedOrChainReorg represents a RoleAdminChanged subscription event raised by the TokenVault contract.
type TokenVaultRoleAdminChangedOrChainReorg struct {
	Event      *TokenVaultRoleAdminChanged
	ChainReorg *types.ChainReorg
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_TokenVault *TokenVaultFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*TokenVaultRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, err := _TokenVault.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &TokenVaultRoleAdminChangedIterator{contract: _TokenVault.contract, event: "RoleAdminChanged", logs: logs}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_TokenVault *TokenVaultFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *TokenVaultRoleAdminChangedOrChainReorg, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _TokenVault.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}

	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenVaultRoleAdminChangedOrChainReorg)
				event.Event = new(TokenVaultRoleAdminChanged)

				if log.ChainReorg == nil {
					if err := _TokenVault.contract.UnpackLog(event.Event, "RoleAdminChanged", *log.Log); err != nil {
						return err
					}
					event.Event.Raw = *log.Log
				} else {
					event.ChainReorg = log.ChainReorg
				}

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_TokenVault *TokenVaultFilterer) ParseRoleAdminChanged(log types.Log) (*TokenVaultRoleAdminChanged, error) {
	event := new(TokenVaultRoleAdminChanged)
	if err := _TokenVault.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenVaultRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the TokenVault contract.
type TokenVaultRoleGrantedIterator struct {
	Event *TokenVaultRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenVaultRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenVaultRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	if it.sub == nil {
		it.done = true
		return it.Next()
	}

	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenVaultRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenVaultRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenVaultRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenVaultRoleGranted represents a RoleGranted event raised by the TokenVault contract.
type TokenVaultRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// TokenVaultRoleGrantedOrChainReorg represents a RoleGranted subscription event raised by the TokenVault contract.
type TokenVaultRoleGrantedOrChainReorg struct {
	Event      *TokenVaultRoleGranted
	ChainReorg *types.ChainReorg
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_TokenVault *TokenVaultFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*TokenVaultRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, err := _TokenVault.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &TokenVaultRoleGrantedIterator{contract: _TokenVault.contract, event: "RoleGranted", logs: logs}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_TokenVault *TokenVaultFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *TokenVaultRoleGrantedOrChainReorg, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _TokenVault.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}

	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenVaultRoleGrantedOrChainReorg)
				event.Event = new(TokenVaultRoleGranted)

				if log.ChainReorg == nil {
					if err := _TokenVault.contract.UnpackLog(event.Event, "RoleGranted", *log.Log); err != nil {
						return err
					}
					event.Event.Raw = *log.Log
				} else {
					event.ChainReorg = log.ChainReorg
				}

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_TokenVault *TokenVaultFilterer) ParseRoleGranted(log types.Log) (*TokenVaultRoleGranted, error) {
	event := new(TokenVaultRoleGranted)
	if err := _TokenVault.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenVaultRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the TokenVault contract.
type TokenVaultRoleRevokedIterator struct {
	Event *TokenVaultRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenVaultRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenVaultRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	if it.sub == nil {
		it.done = true
		return it.Next()
	}

	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenVaultRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenVaultRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenVaultRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenVaultRoleRevoked represents a RoleRevoked event raised by the TokenVault contract.
type TokenVaultRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// TokenVaultRoleRevokedOrChainReorg represents a RoleRevoked subscription event raised by the TokenVault contract.
type TokenVaultRoleRevokedOrChainReorg struct {
	Event      *TokenVaultRoleRevoked
	ChainReorg *types.ChainReorg
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_TokenVault *TokenVaultFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*TokenVaultRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, err := _TokenVault.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &TokenVaultRoleRevokedIterator{contract: _TokenVault.contract, event: "RoleRevoked", logs: logs}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_TokenVault *TokenVaultFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *TokenVaultRoleRevokedOrChainReorg, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _TokenVault.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}

	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenVaultRoleRevokedOrChainReorg)
				event.Event = new(TokenVaultRoleRevoked)

				if log.ChainReorg == nil {
					if err := _TokenVault.contract.UnpackLog(event.Event, "RoleRevoked", *log.Log); err != nil {
						return err
					}
					event.Event.Raw = *log.Log
				} else {
					event.ChainReorg = log.ChainReorg
				}

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_TokenVault *TokenVaultFilterer) ParseRoleRevoked(log types.Log) (*TokenVaultRoleRevoked, error) {
	event := new(TokenVaultRoleRevoked)
	if err := _TokenVault.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
