// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package tokens

import (
	"math/big"
	"strings"

	"github.com/Conflux-Chain/go-conflux-sdk/bind"
	"github.com/Conflux-Chain/go-conflux-sdk/cfxclient/bulk"

	types "github.com/Conflux-Chain/go-conflux-sdk/types"
	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	ethBind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	ethtypes "github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = ethBind.Bind
	_ = common.Big1
	_ = ethtypes.BloomLookup
	_ = event.NewSubscription
)

// PeggedERC721ABI is the input ABI used to generate the binding from.
const PeggedERC721ABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// PeggedERC721Bin is the compiled bytecode used for deploying new contracts.
var PeggedERC721Bin = ""

// DeployPeggedERC721 deploys a new Conflux contract, binding an instance of PeggedERC721 to it.
func DeployPeggedERC721(auth *bind.TransactOpts, backend bind.ContractBackend) (*types.UnsignedTransaction, *types.Hash, *PeggedERC721, error) {
	parsed, err := abi.JSON(strings.NewReader(PeggedERC721ABI))
	if err != nil {
		return nil, nil, nil, err
	}

	tx, hash, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PeggedERC721Bin), backend)
	if err != nil {
		return nil, nil, nil, err
	}
	return tx, hash, &PeggedERC721{PeggedERC721Caller: PeggedERC721Caller{contract: contract}, PeggedERC721Transactor: PeggedERC721Transactor{contract: contract}, PeggedERC721Filterer: PeggedERC721Filterer{contract: contract}}, nil
}

// PeggedERC721 is an auto generated Go binding around an Conflux contract.
type PeggedERC721 struct {
	PeggedERC721Caller     // Read-only binding to the contract
	PeggedERC721Transactor // Write-only binding to the contract
	PeggedERC721Filterer   // Log filterer for contract events
}

// PeggedERC721Caller is an auto generated read-only Go binding around an Conflux contract.
type PeggedERC721Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PeggedERC721BulkCaller is an auto generated read-only Go binding around an Conflux contract.
type PeggedERC721BulkCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PeggedERC721Transactor is an auto generated write-only Go binding around an Conflux contract.
type PeggedERC721Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PeggedERC721BulkTransactor is an auto generated write-only Go binding around an Conflux contract.
type PeggedERC721BulkTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PeggedERC721Filterer is an auto generated log filtering Go binding around an Conflux contract events.
type PeggedERC721Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PeggedERC721Session is an auto generated Go binding around an Conflux contract,
// with pre-set call and transact options.
type PeggedERC721Session struct {
	Contract     *PeggedERC721     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PeggedERC721CallerSession is an auto generated read-only Go binding around an Conflux contract,
// with pre-set call options.
type PeggedERC721CallerSession struct {
	Contract *PeggedERC721Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// PeggedERC721TransactorSession is an auto generated write-only Go binding around an Conflux contract,
// with pre-set transact options.
type PeggedERC721TransactorSession struct {
	Contract     *PeggedERC721Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// PeggedERC721Raw is an auto generated low-level Go binding around an Conflux contract.
type PeggedERC721Raw struct {
	Contract *PeggedERC721 // Generic contract binding to access the raw methods on
}

// PeggedERC721CallerRaw is an auto generated low-level read-only Go binding around an Conflux contract.
type PeggedERC721CallerRaw struct {
	Contract *PeggedERC721Caller // Generic read-only contract binding to access the raw methods on
}

// PeggedERC721TransactorRaw is an auto generated low-level write-only Go binding around an Conflux contract.
type PeggedERC721TransactorRaw struct {
	Contract *PeggedERC721Transactor // Generic write-only contract binding to access the raw methods on
}

// NewPeggedERC721 creates a new instance of PeggedERC721, bound to a specific deployed contract.
func NewPeggedERC721(address types.Address, backend bind.ContractBackend) (*PeggedERC721, error) {
	contract, err := bindPeggedERC721(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PeggedERC721{PeggedERC721Caller: PeggedERC721Caller{contract: contract}, PeggedERC721Transactor: PeggedERC721Transactor{contract: contract}, PeggedERC721Filterer: PeggedERC721Filterer{contract: contract}}, nil
}

// NewPeggedERC721Caller creates a new read-only instance of PeggedERC721, bound to a specific deployed contract.
func NewPeggedERC721Caller(address types.Address, caller bind.ContractCaller) (*PeggedERC721Caller, error) {
	contract, err := bindPeggedERC721(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PeggedERC721Caller{contract: contract}, nil
}

// NewPeggedERC721Transactor creates a new write-only instance of PeggedERC721, bound to a specific deployed contract.
func NewPeggedERC721Transactor(address types.Address, transactor bind.ContractTransactor) (*PeggedERC721Transactor, error) {
	contract, err := bindPeggedERC721(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PeggedERC721Transactor{contract: contract}, nil
}

// NewPeggedERC721Filterer creates a new log filterer instance of PeggedERC721, bound to a specific deployed contract.
func NewPeggedERC721Filterer(address types.Address, filterer bind.ContractFilterer) (*PeggedERC721Filterer, error) {
	contract, err := bindPeggedERC721(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PeggedERC721Filterer{contract: contract}, nil
}

// NewPeggedERC721Caller creates a new read-only instance of PeggedERC721, bound to a specific deployed contract.
func NewPeggedERC721BulkCaller(address types.Address, caller bind.ContractCaller) (*PeggedERC721BulkCaller, error) {
	contract, err := bindPeggedERC721(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PeggedERC721BulkCaller{contract: contract}, nil
}

// NewPeggedERC721BulkTransactor creates a new write-only instance of PeggedERC721, bound to a specific deployed contract.
func NewPeggedERC721BulkTransactor(address types.Address, transactor bind.ContractTransactor) (*PeggedERC721BulkTransactor, error) {
	contract, err := bindPeggedERC721(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PeggedERC721BulkTransactor{contract: contract}, nil
}

// bindPeggedERC721 binds a generic wrapper to an already deployed contract.
func bindPeggedERC721(address types.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PeggedERC721ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PeggedERC721 *PeggedERC721Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PeggedERC721.Contract.PeggedERC721Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PeggedERC721 *PeggedERC721Raw) Transfer(opts *bind.TransactOpts) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.PeggedERC721Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PeggedERC721 *PeggedERC721Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.PeggedERC721Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PeggedERC721 *PeggedERC721CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PeggedERC721.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PeggedERC721 *PeggedERC721TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PeggedERC721 *PeggedERC721TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_PeggedERC721 *PeggedERC721Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	__err := _PeggedERC721.contract.Call(opts, &out, "balanceOf", owner)

	if __err != nil {
		return *new(*big.Int), __err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, __err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_PeggedERC721 *PeggedERC721BulkCaller) BalanceOf(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, owner common.Address) (**big.Int, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _PeggedERC721.contract.GenRequest(opts, "balanceOf", owner)

	out0 := new(*big.Int)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _PeggedERC721.contract.DecodeOutput(&out, rawOut, "balanceOf")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_PeggedERC721 *PeggedERC721Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _PeggedERC721.Contract.BalanceOf(&_PeggedERC721.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_PeggedERC721 *PeggedERC721CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _PeggedERC721.Contract.BalanceOf(&_PeggedERC721.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_PeggedERC721 *PeggedERC721Caller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	__err := _PeggedERC721.contract.Call(opts, &out, "getApproved", tokenId)

	if __err != nil {
		return *new(common.Address), __err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, __err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_PeggedERC721 *PeggedERC721BulkCaller) GetApproved(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, tokenId *big.Int) (*common.Address, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _PeggedERC721.contract.GenRequest(opts, "getApproved", tokenId)

	out0 := new(common.Address)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _PeggedERC721.contract.DecodeOutput(&out, rawOut, "getApproved")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_PeggedERC721 *PeggedERC721Session) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _PeggedERC721.Contract.GetApproved(&_PeggedERC721.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_PeggedERC721 *PeggedERC721CallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _PeggedERC721.Contract.GetApproved(&_PeggedERC721.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_PeggedERC721 *PeggedERC721Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	__err := _PeggedERC721.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if __err != nil {
		return *new(bool), __err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, __err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_PeggedERC721 *PeggedERC721BulkCaller) IsApprovedForAll(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, owner common.Address, operator common.Address) (*bool, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _PeggedERC721.contract.GenRequest(opts, "isApprovedForAll", owner, operator)

	out0 := new(bool)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _PeggedERC721.contract.DecodeOutput(&out, rawOut, "isApprovedForAll")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(bool)).(*bool)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_PeggedERC721 *PeggedERC721Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _PeggedERC721.Contract.IsApprovedForAll(&_PeggedERC721.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_PeggedERC721 *PeggedERC721CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _PeggedERC721.Contract.IsApprovedForAll(&_PeggedERC721.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_PeggedERC721 *PeggedERC721Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	__err := _PeggedERC721.contract.Call(opts, &out, "name")

	if __err != nil {
		return *new(string), __err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, __err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_PeggedERC721 *PeggedERC721BulkCaller) Name(bulkcaller bulk.BulkCaller, opts *bind.CallOpts) (*string, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _PeggedERC721.contract.GenRequest(opts, "name")

	out0 := new(string)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _PeggedERC721.contract.DecodeOutput(&out, rawOut, "name")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(string)).(*string)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_PeggedERC721 *PeggedERC721Session) Name() (string, error) {
	return _PeggedERC721.Contract.Name(&_PeggedERC721.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_PeggedERC721 *PeggedERC721CallerSession) Name() (string, error) {
	return _PeggedERC721.Contract.Name(&_PeggedERC721.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PeggedERC721 *PeggedERC721Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	__err := _PeggedERC721.contract.Call(opts, &out, "owner")

	if __err != nil {
		return *new(common.Address), __err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, __err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PeggedERC721 *PeggedERC721BulkCaller) Owner(bulkcaller bulk.BulkCaller, opts *bind.CallOpts) (*common.Address, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _PeggedERC721.contract.GenRequest(opts, "owner")

	out0 := new(common.Address)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _PeggedERC721.contract.DecodeOutput(&out, rawOut, "owner")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PeggedERC721 *PeggedERC721Session) Owner() (common.Address, error) {
	return _PeggedERC721.Contract.Owner(&_PeggedERC721.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PeggedERC721 *PeggedERC721CallerSession) Owner() (common.Address, error) {
	return _PeggedERC721.Contract.Owner(&_PeggedERC721.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_PeggedERC721 *PeggedERC721Caller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	__err := _PeggedERC721.contract.Call(opts, &out, "ownerOf", tokenId)

	if __err != nil {
		return *new(common.Address), __err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, __err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_PeggedERC721 *PeggedERC721BulkCaller) OwnerOf(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, tokenId *big.Int) (*common.Address, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _PeggedERC721.contract.GenRequest(opts, "ownerOf", tokenId)

	out0 := new(common.Address)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _PeggedERC721.contract.DecodeOutput(&out, rawOut, "ownerOf")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_PeggedERC721 *PeggedERC721Session) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _PeggedERC721.Contract.OwnerOf(&_PeggedERC721.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_PeggedERC721 *PeggedERC721CallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _PeggedERC721.Contract.OwnerOf(&_PeggedERC721.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_PeggedERC721 *PeggedERC721Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	__err := _PeggedERC721.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if __err != nil {
		return *new(bool), __err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, __err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_PeggedERC721 *PeggedERC721BulkCaller) SupportsInterface(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, interfaceId [4]byte) (*bool, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _PeggedERC721.contract.GenRequest(opts, "supportsInterface", interfaceId)

	out0 := new(bool)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _PeggedERC721.contract.DecodeOutput(&out, rawOut, "supportsInterface")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(bool)).(*bool)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_PeggedERC721 *PeggedERC721Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _PeggedERC721.Contract.SupportsInterface(&_PeggedERC721.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_PeggedERC721 *PeggedERC721CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _PeggedERC721.Contract.SupportsInterface(&_PeggedERC721.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_PeggedERC721 *PeggedERC721Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	__err := _PeggedERC721.contract.Call(opts, &out, "symbol")

	if __err != nil {
		return *new(string), __err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, __err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_PeggedERC721 *PeggedERC721BulkCaller) Symbol(bulkcaller bulk.BulkCaller, opts *bind.CallOpts) (*string, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _PeggedERC721.contract.GenRequest(opts, "symbol")

	out0 := new(string)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _PeggedERC721.contract.DecodeOutput(&out, rawOut, "symbol")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(string)).(*string)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_PeggedERC721 *PeggedERC721Session) Symbol() (string, error) {
	return _PeggedERC721.Contract.Symbol(&_PeggedERC721.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_PeggedERC721 *PeggedERC721CallerSession) Symbol() (string, error) {
	return _PeggedERC721.Contract.Symbol(&_PeggedERC721.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_PeggedERC721 *PeggedERC721Caller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	__err := _PeggedERC721.contract.Call(opts, &out, "tokenByIndex", index)

	if __err != nil {
		return *new(*big.Int), __err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, __err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_PeggedERC721 *PeggedERC721BulkCaller) TokenByIndex(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, index *big.Int) (**big.Int, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _PeggedERC721.contract.GenRequest(opts, "tokenByIndex", index)

	out0 := new(*big.Int)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _PeggedERC721.contract.DecodeOutput(&out, rawOut, "tokenByIndex")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_PeggedERC721 *PeggedERC721Session) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _PeggedERC721.Contract.TokenByIndex(&_PeggedERC721.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_PeggedERC721 *PeggedERC721CallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _PeggedERC721.Contract.TokenByIndex(&_PeggedERC721.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_PeggedERC721 *PeggedERC721Caller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	__err := _PeggedERC721.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if __err != nil {
		return *new(*big.Int), __err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, __err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_PeggedERC721 *PeggedERC721BulkCaller) TokenOfOwnerByIndex(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, owner common.Address, index *big.Int) (**big.Int, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _PeggedERC721.contract.GenRequest(opts, "tokenOfOwnerByIndex", owner, index)

	out0 := new(*big.Int)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _PeggedERC721.contract.DecodeOutput(&out, rawOut, "tokenOfOwnerByIndex")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_PeggedERC721 *PeggedERC721Session) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _PeggedERC721.Contract.TokenOfOwnerByIndex(&_PeggedERC721.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_PeggedERC721 *PeggedERC721CallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _PeggedERC721.Contract.TokenOfOwnerByIndex(&_PeggedERC721.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_PeggedERC721 *PeggedERC721Caller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	__err := _PeggedERC721.contract.Call(opts, &out, "tokenURI", tokenId)

	if __err != nil {
		return *new(string), __err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, __err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_PeggedERC721 *PeggedERC721BulkCaller) TokenURI(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, tokenId *big.Int) (*string, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _PeggedERC721.contract.GenRequest(opts, "tokenURI", tokenId)

	out0 := new(string)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _PeggedERC721.contract.DecodeOutput(&out, rawOut, "tokenURI")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(string)).(*string)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_PeggedERC721 *PeggedERC721Session) TokenURI(tokenId *big.Int) (string, error) {
	return _PeggedERC721.Contract.TokenURI(&_PeggedERC721.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_PeggedERC721 *PeggedERC721CallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _PeggedERC721.Contract.TokenURI(&_PeggedERC721.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_PeggedERC721 *PeggedERC721Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	__err := _PeggedERC721.contract.Call(opts, &out, "totalSupply")

	if __err != nil {
		return *new(*big.Int), __err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, __err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_PeggedERC721 *PeggedERC721BulkCaller) TotalSupply(bulkcaller bulk.BulkCaller, opts *bind.CallOpts) (**big.Int, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _PeggedERC721.contract.GenRequest(opts, "totalSupply")

	out0 := new(*big.Int)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _PeggedERC721.contract.DecodeOutput(&out, rawOut, "totalSupply")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_PeggedERC721 *PeggedERC721Session) TotalSupply() (*big.Int, error) {
	return _PeggedERC721.Contract.TotalSupply(&_PeggedERC721.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_PeggedERC721 *PeggedERC721CallerSession) TotalSupply() (*big.Int, error) {
	return _PeggedERC721.Contract.TotalSupply(&_PeggedERC721.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_PeggedERC721 *PeggedERC721Transactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_PeggedERC721 *PeggedERC721BulkTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) types.UnsignedTransaction {
	return _PeggedERC721.contract.GenUnsignedTransaction(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_PeggedERC721 *PeggedERC721Session) Approve(to common.Address, tokenId *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.Approve(&_PeggedERC721.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_PeggedERC721 *PeggedERC721TransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.Approve(&_PeggedERC721.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_PeggedERC721 *PeggedERC721Transactor) Burn(opts *bind.TransactOpts, tokenId *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.contract.Transact(opts, "burn", tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_PeggedERC721 *PeggedERC721BulkTransactor) Burn(opts *bind.TransactOpts, tokenId *big.Int) types.UnsignedTransaction {
	return _PeggedERC721.contract.GenUnsignedTransaction(opts, "burn", tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_PeggedERC721 *PeggedERC721Session) Burn(tokenId *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.Burn(&_PeggedERC721.TransactOpts, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_PeggedERC721 *PeggedERC721TransactorSession) Burn(tokenId *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.Burn(&_PeggedERC721.TransactOpts, tokenId)
}

// Initialize is a paid mutator transaction binding the contract method 0xa6487c53.
//
// Solidity: function initialize(string name_, string symbol_, string uri_) returns()
func (_PeggedERC721 *PeggedERC721Transactor) Initialize(opts *bind.TransactOpts, name_ string, symbol_ string, uri_ string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.contract.Transact(opts, "initialize", name_, symbol_, uri_)
}

// Initialize is a paid mutator transaction binding the contract method 0xa6487c53.
//
// Solidity: function initialize(string name_, string symbol_, string uri_) returns()
func (_PeggedERC721 *PeggedERC721BulkTransactor) Initialize(opts *bind.TransactOpts, name_ string, symbol_ string, uri_ string) types.UnsignedTransaction {
	return _PeggedERC721.contract.GenUnsignedTransaction(opts, "initialize", name_, symbol_, uri_)
}

// Initialize is a paid mutator transaction binding the contract method 0xa6487c53.
//
// Solidity: function initialize(string name_, string symbol_, string uri_) returns()
func (_PeggedERC721 *PeggedERC721Session) Initialize(name_ string, symbol_ string, uri_ string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.Initialize(&_PeggedERC721.TransactOpts, name_, symbol_, uri_)
}

// Initialize is a paid mutator transaction binding the contract method 0xa6487c53.
//
// Solidity: function initialize(string name_, string symbol_, string uri_) returns()
func (_PeggedERC721 *PeggedERC721TransactorSession) Initialize(name_ string, symbol_ string, uri_ string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.Initialize(&_PeggedERC721.TransactOpts, name_, symbol_, uri_)
}

// Mint is a paid mutator transaction binding the contract method 0x9727756a.
//
// Solidity: function mint(address to, uint256[] tokenIds, uint256[] ) returns()
func (_PeggedERC721 *PeggedERC721Transactor) Mint(opts *bind.TransactOpts, to common.Address, tokenIds []*big.Int, arg2 []*big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.contract.Transact(opts, "mint", to, tokenIds, arg2)
}

// Mint is a paid mutator transaction binding the contract method 0x9727756a.
//
// Solidity: function mint(address to, uint256[] tokenIds, uint256[] ) returns()
func (_PeggedERC721 *PeggedERC721BulkTransactor) Mint(opts *bind.TransactOpts, to common.Address, tokenIds []*big.Int, arg2 []*big.Int) types.UnsignedTransaction {
	return _PeggedERC721.contract.GenUnsignedTransaction(opts, "mint", to, tokenIds, arg2)
}

// Mint is a paid mutator transaction binding the contract method 0x9727756a.
//
// Solidity: function mint(address to, uint256[] tokenIds, uint256[] ) returns()
func (_PeggedERC721 *PeggedERC721Session) Mint(to common.Address, tokenIds []*big.Int, arg2 []*big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.Mint(&_PeggedERC721.TransactOpts, to, tokenIds, arg2)
}

// Mint is a paid mutator transaction binding the contract method 0x9727756a.
//
// Solidity: function mint(address to, uint256[] tokenIds, uint256[] ) returns()
func (_PeggedERC721 *PeggedERC721TransactorSession) Mint(to common.Address, tokenIds []*big.Int, arg2 []*big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.Mint(&_PeggedERC721.TransactOpts, to, tokenIds, arg2)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PeggedERC721 *PeggedERC721Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PeggedERC721 *PeggedERC721BulkTransactor) RenounceOwnership(opts *bind.TransactOpts) types.UnsignedTransaction {
	return _PeggedERC721.contract.GenUnsignedTransaction(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PeggedERC721 *PeggedERC721Session) RenounceOwnership() (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.RenounceOwnership(&_PeggedERC721.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PeggedERC721 *PeggedERC721TransactorSession) RenounceOwnership() (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.RenounceOwnership(&_PeggedERC721.TransactOpts)
}

// SafeMint is a paid mutator transaction binding the contract method 0xcd279c7c.
//
// Solidity: function safeMint(address to, uint256 tokenId, string uri) returns()
func (_PeggedERC721 *PeggedERC721Transactor) SafeMint(opts *bind.TransactOpts, to common.Address, tokenId *big.Int, uri string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.contract.Transact(opts, "safeMint", to, tokenId, uri)
}

// SafeMint is a paid mutator transaction binding the contract method 0xcd279c7c.
//
// Solidity: function safeMint(address to, uint256 tokenId, string uri) returns()
func (_PeggedERC721 *PeggedERC721BulkTransactor) SafeMint(opts *bind.TransactOpts, to common.Address, tokenId *big.Int, uri string) types.UnsignedTransaction {
	return _PeggedERC721.contract.GenUnsignedTransaction(opts, "safeMint", to, tokenId, uri)
}

// SafeMint is a paid mutator transaction binding the contract method 0xcd279c7c.
//
// Solidity: function safeMint(address to, uint256 tokenId, string uri) returns()
func (_PeggedERC721 *PeggedERC721Session) SafeMint(to common.Address, tokenId *big.Int, uri string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.SafeMint(&_PeggedERC721.TransactOpts, to, tokenId, uri)
}

// SafeMint is a paid mutator transaction binding the contract method 0xcd279c7c.
//
// Solidity: function safeMint(address to, uint256 tokenId, string uri) returns()
func (_PeggedERC721 *PeggedERC721TransactorSession) SafeMint(to common.Address, tokenId *big.Int, uri string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.SafeMint(&_PeggedERC721.TransactOpts, to, tokenId, uri)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_PeggedERC721 *PeggedERC721Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_PeggedERC721 *PeggedERC721BulkTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) types.UnsignedTransaction {
	return _PeggedERC721.contract.GenUnsignedTransaction(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_PeggedERC721 *PeggedERC721Session) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.SafeTransferFrom(&_PeggedERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_PeggedERC721 *PeggedERC721TransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.SafeTransferFrom(&_PeggedERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_PeggedERC721 *PeggedERC721Transactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_PeggedERC721 *PeggedERC721BulkTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) types.UnsignedTransaction {
	return _PeggedERC721.contract.GenUnsignedTransaction(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_PeggedERC721 *PeggedERC721Session) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.SafeTransferFrom0(&_PeggedERC721.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_PeggedERC721 *PeggedERC721TransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.SafeTransferFrom0(&_PeggedERC721.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_PeggedERC721 *PeggedERC721Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_PeggedERC721 *PeggedERC721BulkTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) types.UnsignedTransaction {
	return _PeggedERC721.contract.GenUnsignedTransaction(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_PeggedERC721 *PeggedERC721Session) SetApprovalForAll(operator common.Address, approved bool) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.SetApprovalForAll(&_PeggedERC721.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_PeggedERC721 *PeggedERC721TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.SetApprovalForAll(&_PeggedERC721.TransactOpts, operator, approved)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri_) returns()
func (_PeggedERC721 *PeggedERC721Transactor) SetBaseURI(opts *bind.TransactOpts, uri_ string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.contract.Transact(opts, "setBaseURI", uri_)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri_) returns()
func (_PeggedERC721 *PeggedERC721BulkTransactor) SetBaseURI(opts *bind.TransactOpts, uri_ string) types.UnsignedTransaction {
	return _PeggedERC721.contract.GenUnsignedTransaction(opts, "setBaseURI", uri_)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri_) returns()
func (_PeggedERC721 *PeggedERC721Session) SetBaseURI(uri_ string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.SetBaseURI(&_PeggedERC721.TransactOpts, uri_)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri_) returns()
func (_PeggedERC721 *PeggedERC721TransactorSession) SetBaseURI(uri_ string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.SetBaseURI(&_PeggedERC721.TransactOpts, uri_)
}

// SetTokenURI is a paid mutator transaction binding the contract method 0x162094c4.
//
// Solidity: function setTokenURI(uint256 tokenId, string _tokenURI) returns()
func (_PeggedERC721 *PeggedERC721Transactor) SetTokenURI(opts *bind.TransactOpts, tokenId *big.Int, _tokenURI string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.contract.Transact(opts, "setTokenURI", tokenId, _tokenURI)
}

// SetTokenURI is a paid mutator transaction binding the contract method 0x162094c4.
//
// Solidity: function setTokenURI(uint256 tokenId, string _tokenURI) returns()
func (_PeggedERC721 *PeggedERC721BulkTransactor) SetTokenURI(opts *bind.TransactOpts, tokenId *big.Int, _tokenURI string) types.UnsignedTransaction {
	return _PeggedERC721.contract.GenUnsignedTransaction(opts, "setTokenURI", tokenId, _tokenURI)
}

// SetTokenURI is a paid mutator transaction binding the contract method 0x162094c4.
//
// Solidity: function setTokenURI(uint256 tokenId, string _tokenURI) returns()
func (_PeggedERC721 *PeggedERC721Session) SetTokenURI(tokenId *big.Int, _tokenURI string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.SetTokenURI(&_PeggedERC721.TransactOpts, tokenId, _tokenURI)
}

// SetTokenURI is a paid mutator transaction binding the contract method 0x162094c4.
//
// Solidity: function setTokenURI(uint256 tokenId, string _tokenURI) returns()
func (_PeggedERC721 *PeggedERC721TransactorSession) SetTokenURI(tokenId *big.Int, _tokenURI string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.SetTokenURI(&_PeggedERC721.TransactOpts, tokenId, _tokenURI)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_PeggedERC721 *PeggedERC721Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_PeggedERC721 *PeggedERC721BulkTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) types.UnsignedTransaction {
	return _PeggedERC721.contract.GenUnsignedTransaction(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_PeggedERC721 *PeggedERC721Session) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.TransferFrom(&_PeggedERC721.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_PeggedERC721 *PeggedERC721TransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.TransferFrom(&_PeggedERC721.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PeggedERC721 *PeggedERC721Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PeggedERC721 *PeggedERC721BulkTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) types.UnsignedTransaction {
	return _PeggedERC721.contract.GenUnsignedTransaction(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PeggedERC721 *PeggedERC721Session) TransferOwnership(newOwner common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.TransferOwnership(&_PeggedERC721.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PeggedERC721 *PeggedERC721TransactorSession) TransferOwnership(newOwner common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC721.Contract.TransferOwnership(&_PeggedERC721.TransactOpts, newOwner)
}

// PeggedERC721ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the PeggedERC721 contract.
type PeggedERC721ApprovalIterator struct {
	Event *PeggedERC721Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PeggedERC721ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PeggedERC721Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	if it.sub == nil {
		it.done = true
		return it.Next()
	}

	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PeggedERC721Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PeggedERC721ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PeggedERC721ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PeggedERC721Approval represents a Approval event raised by the PeggedERC721 contract.
type PeggedERC721Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// PeggedERC721ApprovalOrChainReorg represents a Approval subscription event raised by the PeggedERC721 contract.
type PeggedERC721ApprovalOrChainReorg struct {
	Event      *PeggedERC721Approval
	ChainReorg *types.ChainReorg
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_PeggedERC721 *PeggedERC721Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*PeggedERC721ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, err := _PeggedERC721.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &PeggedERC721ApprovalIterator{contract: _PeggedERC721.contract, event: "Approval", logs: logs}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_PeggedERC721 *PeggedERC721Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *PeggedERC721ApprovalOrChainReorg, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _PeggedERC721.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}

	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PeggedERC721ApprovalOrChainReorg)
				event.Event = new(PeggedERC721Approval)

				if log.ChainReorg == nil {
					if err := _PeggedERC721.contract.UnpackLog(event.Event, "Approval", *log.Log); err != nil {
						return err
					}
					event.Event.Raw = *log.Log
				} else {
					event.ChainReorg = log.ChainReorg
				}

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_PeggedERC721 *PeggedERC721Filterer) ParseApproval(log types.Log) (*PeggedERC721Approval, error) {
	event := new(PeggedERC721Approval)
	if err := _PeggedERC721.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PeggedERC721ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the PeggedERC721 contract.
type PeggedERC721ApprovalForAllIterator struct {
	Event *PeggedERC721ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PeggedERC721ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PeggedERC721ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	if it.sub == nil {
		it.done = true
		return it.Next()
	}

	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PeggedERC721ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PeggedERC721ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PeggedERC721ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PeggedERC721ApprovalForAll represents a ApprovalForAll event raised by the PeggedERC721 contract.
type PeggedERC721ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// PeggedERC721ApprovalForAllOrChainReorg represents a ApprovalForAll subscription event raised by the PeggedERC721 contract.
type PeggedERC721ApprovalForAllOrChainReorg struct {
	Event      *PeggedERC721ApprovalForAll
	ChainReorg *types.ChainReorg
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_PeggedERC721 *PeggedERC721Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*PeggedERC721ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, err := _PeggedERC721.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &PeggedERC721ApprovalForAllIterator{contract: _PeggedERC721.contract, event: "ApprovalForAll", logs: logs}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_PeggedERC721 *PeggedERC721Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *PeggedERC721ApprovalForAllOrChainReorg, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PeggedERC721.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}

	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PeggedERC721ApprovalForAllOrChainReorg)
				event.Event = new(PeggedERC721ApprovalForAll)

				if log.ChainReorg == nil {
					if err := _PeggedERC721.contract.UnpackLog(event.Event, "ApprovalForAll", *log.Log); err != nil {
						return err
					}
					event.Event.Raw = *log.Log
				} else {
					event.ChainReorg = log.ChainReorg
				}

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_PeggedERC721 *PeggedERC721Filterer) ParseApprovalForAll(log types.Log) (*PeggedERC721ApprovalForAll, error) {
	event := new(PeggedERC721ApprovalForAll)
	if err := _PeggedERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PeggedERC721OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the PeggedERC721 contract.
type PeggedERC721OwnershipTransferredIterator struct {
	Event *PeggedERC721OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PeggedERC721OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PeggedERC721OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	if it.sub == nil {
		it.done = true
		return it.Next()
	}

	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PeggedERC721OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PeggedERC721OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PeggedERC721OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PeggedERC721OwnershipTransferred represents a OwnershipTransferred event raised by the PeggedERC721 contract.
type PeggedERC721OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// PeggedERC721OwnershipTransferredOrChainReorg represents a OwnershipTransferred subscription event raised by the PeggedERC721 contract.
type PeggedERC721OwnershipTransferredOrChainReorg struct {
	Event      *PeggedERC721OwnershipTransferred
	ChainReorg *types.ChainReorg
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PeggedERC721 *PeggedERC721Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PeggedERC721OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, err := _PeggedERC721.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PeggedERC721OwnershipTransferredIterator{contract: _PeggedERC721.contract, event: "OwnershipTransferred", logs: logs}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PeggedERC721 *PeggedERC721Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PeggedERC721OwnershipTransferredOrChainReorg, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PeggedERC721.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}

	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PeggedERC721OwnershipTransferredOrChainReorg)
				event.Event = new(PeggedERC721OwnershipTransferred)

				if log.ChainReorg == nil {
					if err := _PeggedERC721.contract.UnpackLog(event.Event, "OwnershipTransferred", *log.Log); err != nil {
						return err
					}
					event.Event.Raw = *log.Log
				} else {
					event.ChainReorg = log.ChainReorg
				}

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PeggedERC721 *PeggedERC721Filterer) ParseOwnershipTransferred(log types.Log) (*PeggedERC721OwnershipTransferred, error) {
	event := new(PeggedERC721OwnershipTransferred)
	if err := _PeggedERC721.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PeggedERC721TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the PeggedERC721 contract.
type PeggedERC721TransferIterator struct {
	Event *PeggedERC721Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PeggedERC721TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PeggedERC721Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	if it.sub == nil {
		it.done = true
		return it.Next()
	}

	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PeggedERC721Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PeggedERC721TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PeggedERC721TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PeggedERC721Transfer represents a Transfer event raised by the PeggedERC721 contract.
type PeggedERC721Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// PeggedERC721TransferOrChainReorg represents a Transfer subscription event raised by the PeggedERC721 contract.
type PeggedERC721TransferOrChainReorg struct {
	Event      *PeggedERC721Transfer
	ChainReorg *types.ChainReorg
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_PeggedERC721 *PeggedERC721Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*PeggedERC721TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, err := _PeggedERC721.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &PeggedERC721TransferIterator{contract: _PeggedERC721.contract, event: "Transfer", logs: logs}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_PeggedERC721 *PeggedERC721Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *PeggedERC721TransferOrChainReorg, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _PeggedERC721.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}

	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PeggedERC721TransferOrChainReorg)
				event.Event = new(PeggedERC721Transfer)

				if log.ChainReorg == nil {
					if err := _PeggedERC721.contract.UnpackLog(event.Event, "Transfer", *log.Log); err != nil {
						return err
					}
					event.Event.Raw = *log.Log
				} else {
					event.ChainReorg = log.ChainReorg
				}

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_PeggedERC721 *PeggedERC721Filterer) ParseTransfer(log types.Log) (*PeggedERC721Transfer, error) {
	event := new(PeggedERC721Transfer)
	if err := _PeggedERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
