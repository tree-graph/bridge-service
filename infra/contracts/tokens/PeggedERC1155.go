// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package tokens

import (
	"math/big"
	"strings"

	"github.com/Conflux-Chain/go-conflux-sdk/bind"
	"github.com/Conflux-Chain/go-conflux-sdk/cfxclient/bulk"

	types "github.com/Conflux-Chain/go-conflux-sdk/types"
	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	ethBind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	ethtypes "github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = ethBind.Bind
	_ = common.Big1
	_ = ethtypes.BloomLookup
	_ = event.NewSubscription
)

// PeggedERC1155ABI is the input ABI used to generate the binding from.
const PeggedERC1155ABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// PeggedERC1155Bin is the compiled bytecode used for deploying new contracts.
var PeggedERC1155Bin = ""

// DeployPeggedERC1155 deploys a new Conflux contract, binding an instance of PeggedERC1155 to it.
func DeployPeggedERC1155(auth *bind.TransactOpts, backend bind.ContractBackend) (*types.UnsignedTransaction, *types.Hash, *PeggedERC1155, error) {
	parsed, err := abi.JSON(strings.NewReader(PeggedERC1155ABI))
	if err != nil {
		return nil, nil, nil, err
	}

	tx, hash, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PeggedERC1155Bin), backend)
	if err != nil {
		return nil, nil, nil, err
	}
	return tx, hash, &PeggedERC1155{PeggedERC1155Caller: PeggedERC1155Caller{contract: contract}, PeggedERC1155Transactor: PeggedERC1155Transactor{contract: contract}, PeggedERC1155Filterer: PeggedERC1155Filterer{contract: contract}}, nil
}

// PeggedERC1155 is an auto generated Go binding around an Conflux contract.
type PeggedERC1155 struct {
	PeggedERC1155Caller     // Read-only binding to the contract
	PeggedERC1155Transactor // Write-only binding to the contract
	PeggedERC1155Filterer   // Log filterer for contract events
}

// PeggedERC1155Caller is an auto generated read-only Go binding around an Conflux contract.
type PeggedERC1155Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PeggedERC1155BulkCaller is an auto generated read-only Go binding around an Conflux contract.
type PeggedERC1155BulkCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PeggedERC1155Transactor is an auto generated write-only Go binding around an Conflux contract.
type PeggedERC1155Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PeggedERC1155BulkTransactor is an auto generated write-only Go binding around an Conflux contract.
type PeggedERC1155BulkTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PeggedERC1155Filterer is an auto generated log filtering Go binding around an Conflux contract events.
type PeggedERC1155Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PeggedERC1155Session is an auto generated Go binding around an Conflux contract,
// with pre-set call and transact options.
type PeggedERC1155Session struct {
	Contract     *PeggedERC1155    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PeggedERC1155CallerSession is an auto generated read-only Go binding around an Conflux contract,
// with pre-set call options.
type PeggedERC1155CallerSession struct {
	Contract *PeggedERC1155Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// PeggedERC1155TransactorSession is an auto generated write-only Go binding around an Conflux contract,
// with pre-set transact options.
type PeggedERC1155TransactorSession struct {
	Contract     *PeggedERC1155Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// PeggedERC1155Raw is an auto generated low-level Go binding around an Conflux contract.
type PeggedERC1155Raw struct {
	Contract *PeggedERC1155 // Generic contract binding to access the raw methods on
}

// PeggedERC1155CallerRaw is an auto generated low-level read-only Go binding around an Conflux contract.
type PeggedERC1155CallerRaw struct {
	Contract *PeggedERC1155Caller // Generic read-only contract binding to access the raw methods on
}

// PeggedERC1155TransactorRaw is an auto generated low-level write-only Go binding around an Conflux contract.
type PeggedERC1155TransactorRaw struct {
	Contract *PeggedERC1155Transactor // Generic write-only contract binding to access the raw methods on
}

// NewPeggedERC1155 creates a new instance of PeggedERC1155, bound to a specific deployed contract.
func NewPeggedERC1155(address types.Address, backend bind.ContractBackend) (*PeggedERC1155, error) {
	contract, err := bindPeggedERC1155(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PeggedERC1155{PeggedERC1155Caller: PeggedERC1155Caller{contract: contract}, PeggedERC1155Transactor: PeggedERC1155Transactor{contract: contract}, PeggedERC1155Filterer: PeggedERC1155Filterer{contract: contract}}, nil
}

// NewPeggedERC1155Caller creates a new read-only instance of PeggedERC1155, bound to a specific deployed contract.
func NewPeggedERC1155Caller(address types.Address, caller bind.ContractCaller) (*PeggedERC1155Caller, error) {
	contract, err := bindPeggedERC1155(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PeggedERC1155Caller{contract: contract}, nil
}

// NewPeggedERC1155Transactor creates a new write-only instance of PeggedERC1155, bound to a specific deployed contract.
func NewPeggedERC1155Transactor(address types.Address, transactor bind.ContractTransactor) (*PeggedERC1155Transactor, error) {
	contract, err := bindPeggedERC1155(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PeggedERC1155Transactor{contract: contract}, nil
}

// NewPeggedERC1155Filterer creates a new log filterer instance of PeggedERC1155, bound to a specific deployed contract.
func NewPeggedERC1155Filterer(address types.Address, filterer bind.ContractFilterer) (*PeggedERC1155Filterer, error) {
	contract, err := bindPeggedERC1155(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PeggedERC1155Filterer{contract: contract}, nil
}

// NewPeggedERC1155Caller creates a new read-only instance of PeggedERC1155, bound to a specific deployed contract.
func NewPeggedERC1155BulkCaller(address types.Address, caller bind.ContractCaller) (*PeggedERC1155BulkCaller, error) {
	contract, err := bindPeggedERC1155(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PeggedERC1155BulkCaller{contract: contract}, nil
}

// NewPeggedERC1155BulkTransactor creates a new write-only instance of PeggedERC1155, bound to a specific deployed contract.
func NewPeggedERC1155BulkTransactor(address types.Address, transactor bind.ContractTransactor) (*PeggedERC1155BulkTransactor, error) {
	contract, err := bindPeggedERC1155(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PeggedERC1155BulkTransactor{contract: contract}, nil
}

// bindPeggedERC1155 binds a generic wrapper to an already deployed contract.
func bindPeggedERC1155(address types.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PeggedERC1155ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PeggedERC1155 *PeggedERC1155Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PeggedERC1155.Contract.PeggedERC1155Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PeggedERC1155 *PeggedERC1155Raw) Transfer(opts *bind.TransactOpts) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.PeggedERC1155Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PeggedERC1155 *PeggedERC1155Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.PeggedERC1155Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PeggedERC1155 *PeggedERC1155CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PeggedERC1155.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PeggedERC1155 *PeggedERC1155TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PeggedERC1155 *PeggedERC1155TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_PeggedERC1155 *PeggedERC1155Caller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	__err := _PeggedERC1155.contract.Call(opts, &out, "balanceOf", account, id)

	if __err != nil {
		return *new(*big.Int), __err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, __err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_PeggedERC1155 *PeggedERC1155BulkCaller) BalanceOf(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, account common.Address, id *big.Int) (**big.Int, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _PeggedERC1155.contract.GenRequest(opts, "balanceOf", account, id)

	out0 := new(*big.Int)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _PeggedERC1155.contract.DecodeOutput(&out, rawOut, "balanceOf")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_PeggedERC1155 *PeggedERC1155Session) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _PeggedERC1155.Contract.BalanceOf(&_PeggedERC1155.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_PeggedERC1155 *PeggedERC1155CallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _PeggedERC1155.Contract.BalanceOf(&_PeggedERC1155.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_PeggedERC1155 *PeggedERC1155Caller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	__err := _PeggedERC1155.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if __err != nil {
		return *new([]*big.Int), __err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, __err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_PeggedERC1155 *PeggedERC1155BulkCaller) BalanceOfBatch(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) (*[]*big.Int, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _PeggedERC1155.contract.GenRequest(opts, "balanceOfBatch", accounts, ids)

	out0 := new([]*big.Int)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _PeggedERC1155.contract.DecodeOutput(&out, rawOut, "balanceOfBatch")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_PeggedERC1155 *PeggedERC1155Session) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _PeggedERC1155.Contract.BalanceOfBatch(&_PeggedERC1155.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_PeggedERC1155 *PeggedERC1155CallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _PeggedERC1155.Contract.BalanceOfBatch(&_PeggedERC1155.CallOpts, accounts, ids)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_PeggedERC1155 *PeggedERC1155Caller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	__err := _PeggedERC1155.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if __err != nil {
		return *new(bool), __err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, __err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_PeggedERC1155 *PeggedERC1155BulkCaller) IsApprovedForAll(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, account common.Address, operator common.Address) (*bool, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _PeggedERC1155.contract.GenRequest(opts, "isApprovedForAll", account, operator)

	out0 := new(bool)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _PeggedERC1155.contract.DecodeOutput(&out, rawOut, "isApprovedForAll")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(bool)).(*bool)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_PeggedERC1155 *PeggedERC1155Session) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _PeggedERC1155.Contract.IsApprovedForAll(&_PeggedERC1155.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_PeggedERC1155 *PeggedERC1155CallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _PeggedERC1155.Contract.IsApprovedForAll(&_PeggedERC1155.CallOpts, account, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_PeggedERC1155 *PeggedERC1155Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	__err := _PeggedERC1155.contract.Call(opts, &out, "name")

	if __err != nil {
		return *new(string), __err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, __err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_PeggedERC1155 *PeggedERC1155BulkCaller) Name(bulkcaller bulk.BulkCaller, opts *bind.CallOpts) (*string, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _PeggedERC1155.contract.GenRequest(opts, "name")

	out0 := new(string)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _PeggedERC1155.contract.DecodeOutput(&out, rawOut, "name")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(string)).(*string)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_PeggedERC1155 *PeggedERC1155Session) Name() (string, error) {
	return _PeggedERC1155.Contract.Name(&_PeggedERC1155.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_PeggedERC1155 *PeggedERC1155CallerSession) Name() (string, error) {
	return _PeggedERC1155.Contract.Name(&_PeggedERC1155.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PeggedERC1155 *PeggedERC1155Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	__err := _PeggedERC1155.contract.Call(opts, &out, "owner")

	if __err != nil {
		return *new(common.Address), __err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, __err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PeggedERC1155 *PeggedERC1155BulkCaller) Owner(bulkcaller bulk.BulkCaller, opts *bind.CallOpts) (*common.Address, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _PeggedERC1155.contract.GenRequest(opts, "owner")

	out0 := new(common.Address)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _PeggedERC1155.contract.DecodeOutput(&out, rawOut, "owner")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PeggedERC1155 *PeggedERC1155Session) Owner() (common.Address, error) {
	return _PeggedERC1155.Contract.Owner(&_PeggedERC1155.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PeggedERC1155 *PeggedERC1155CallerSession) Owner() (common.Address, error) {
	return _PeggedERC1155.Contract.Owner(&_PeggedERC1155.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_PeggedERC1155 *PeggedERC1155Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	__err := _PeggedERC1155.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if __err != nil {
		return *new(bool), __err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, __err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_PeggedERC1155 *PeggedERC1155BulkCaller) SupportsInterface(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, interfaceId [4]byte) (*bool, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _PeggedERC1155.contract.GenRequest(opts, "supportsInterface", interfaceId)

	out0 := new(bool)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _PeggedERC1155.contract.DecodeOutput(&out, rawOut, "supportsInterface")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(bool)).(*bool)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_PeggedERC1155 *PeggedERC1155Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _PeggedERC1155.Contract.SupportsInterface(&_PeggedERC1155.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_PeggedERC1155 *PeggedERC1155CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _PeggedERC1155.Contract.SupportsInterface(&_PeggedERC1155.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_PeggedERC1155 *PeggedERC1155Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	__err := _PeggedERC1155.contract.Call(opts, &out, "symbol")

	if __err != nil {
		return *new(string), __err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, __err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_PeggedERC1155 *PeggedERC1155BulkCaller) Symbol(bulkcaller bulk.BulkCaller, opts *bind.CallOpts) (*string, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _PeggedERC1155.contract.GenRequest(opts, "symbol")

	out0 := new(string)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _PeggedERC1155.contract.DecodeOutput(&out, rawOut, "symbol")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(string)).(*string)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_PeggedERC1155 *PeggedERC1155Session) Symbol() (string, error) {
	return _PeggedERC1155.Contract.Symbol(&_PeggedERC1155.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_PeggedERC1155 *PeggedERC1155CallerSession) Symbol() (string, error) {
	return _PeggedERC1155.Contract.Symbol(&_PeggedERC1155.CallOpts)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenId) view returns(string)
func (_PeggedERC1155 *PeggedERC1155Caller) Uri(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	__err := _PeggedERC1155.contract.Call(opts, &out, "uri", tokenId)

	if __err != nil {
		return *new(string), __err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, __err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenId) view returns(string)
func (_PeggedERC1155 *PeggedERC1155BulkCaller) Uri(bulkcaller bulk.BulkCaller, opts *bind.CallOpts, tokenId *big.Int) (*string, *error) {

	if opts == nil {
		opts = new(bind.CallOpts)
	}
	__request := _PeggedERC1155.contract.GenRequest(opts, "uri", tokenId)

	out0 := new(string)

	__err := new(error)

	outDecoder := func(rawOut []byte) error {
		out := []interface{}{}
		err := _PeggedERC1155.contract.DecodeOutput(&out, rawOut, "uri")
		if err != nil {
			return err
		}

		*out0 = *abi.ConvertType(out[0], new(string)).(*string)

		return nil
	}

	bulkcaller.Customer().ContractCall(__request, opts.EpochNumber, outDecoder, __err)

	return out0, __err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenId) view returns(string)
func (_PeggedERC1155 *PeggedERC1155Session) Uri(tokenId *big.Int) (string, error) {
	return _PeggedERC1155.Contract.Uri(&_PeggedERC1155.CallOpts, tokenId)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenId) view returns(string)
func (_PeggedERC1155 *PeggedERC1155CallerSession) Uri(tokenId *big.Int) (string, error) {
	return _PeggedERC1155.Contract.Uri(&_PeggedERC1155.CallOpts, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_PeggedERC1155 *PeggedERC1155Transactor) Burn(opts *bind.TransactOpts, account common.Address, id *big.Int, value *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.contract.Transact(opts, "burn", account, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_PeggedERC1155 *PeggedERC1155BulkTransactor) Burn(opts *bind.TransactOpts, account common.Address, id *big.Int, value *big.Int) types.UnsignedTransaction {
	return _PeggedERC1155.contract.GenUnsignedTransaction(opts, "burn", account, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_PeggedERC1155 *PeggedERC1155Session) Burn(account common.Address, id *big.Int, value *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.Burn(&_PeggedERC1155.TransactOpts, account, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_PeggedERC1155 *PeggedERC1155TransactorSession) Burn(account common.Address, id *big.Int, value *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.Burn(&_PeggedERC1155.TransactOpts, account, id, value)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_PeggedERC1155 *PeggedERC1155Transactor) BurnBatch(opts *bind.TransactOpts, account common.Address, ids []*big.Int, values []*big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.contract.Transact(opts, "burnBatch", account, ids, values)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_PeggedERC1155 *PeggedERC1155BulkTransactor) BurnBatch(opts *bind.TransactOpts, account common.Address, ids []*big.Int, values []*big.Int) types.UnsignedTransaction {
	return _PeggedERC1155.contract.GenUnsignedTransaction(opts, "burnBatch", account, ids, values)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_PeggedERC1155 *PeggedERC1155Session) BurnBatch(account common.Address, ids []*big.Int, values []*big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.BurnBatch(&_PeggedERC1155.TransactOpts, account, ids, values)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_PeggedERC1155 *PeggedERC1155TransactorSession) BurnBatch(account common.Address, ids []*big.Int, values []*big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.BurnBatch(&_PeggedERC1155.TransactOpts, account, ids, values)
}

// Initialize is a paid mutator transaction binding the contract method 0xa6487c53.
//
// Solidity: function initialize(string name_, string symbol_, string uri_) returns()
func (_PeggedERC1155 *PeggedERC1155Transactor) Initialize(opts *bind.TransactOpts, name_ string, symbol_ string, uri_ string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.contract.Transact(opts, "initialize", name_, symbol_, uri_)
}

// Initialize is a paid mutator transaction binding the contract method 0xa6487c53.
//
// Solidity: function initialize(string name_, string symbol_, string uri_) returns()
func (_PeggedERC1155 *PeggedERC1155BulkTransactor) Initialize(opts *bind.TransactOpts, name_ string, symbol_ string, uri_ string) types.UnsignedTransaction {
	return _PeggedERC1155.contract.GenUnsignedTransaction(opts, "initialize", name_, symbol_, uri_)
}

// Initialize is a paid mutator transaction binding the contract method 0xa6487c53.
//
// Solidity: function initialize(string name_, string symbol_, string uri_) returns()
func (_PeggedERC1155 *PeggedERC1155Session) Initialize(name_ string, symbol_ string, uri_ string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.Initialize(&_PeggedERC1155.TransactOpts, name_, symbol_, uri_)
}

// Initialize is a paid mutator transaction binding the contract method 0xa6487c53.
//
// Solidity: function initialize(string name_, string symbol_, string uri_) returns()
func (_PeggedERC1155 *PeggedERC1155TransactorSession) Initialize(name_ string, symbol_ string, uri_ string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.Initialize(&_PeggedERC1155.TransactOpts, name_, symbol_, uri_)
}

// Mint is a paid mutator transaction binding the contract method 0x9727756a.
//
// Solidity: function mint(address to, uint256[] tokenIds, uint256[] amounts) returns()
func (_PeggedERC1155 *PeggedERC1155Transactor) Mint(opts *bind.TransactOpts, to common.Address, tokenIds []*big.Int, amounts []*big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.contract.Transact(opts, "mint", to, tokenIds, amounts)
}

// Mint is a paid mutator transaction binding the contract method 0x9727756a.
//
// Solidity: function mint(address to, uint256[] tokenIds, uint256[] amounts) returns()
func (_PeggedERC1155 *PeggedERC1155BulkTransactor) Mint(opts *bind.TransactOpts, to common.Address, tokenIds []*big.Int, amounts []*big.Int) types.UnsignedTransaction {
	return _PeggedERC1155.contract.GenUnsignedTransaction(opts, "mint", to, tokenIds, amounts)
}

// Mint is a paid mutator transaction binding the contract method 0x9727756a.
//
// Solidity: function mint(address to, uint256[] tokenIds, uint256[] amounts) returns()
func (_PeggedERC1155 *PeggedERC1155Session) Mint(to common.Address, tokenIds []*big.Int, amounts []*big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.Mint(&_PeggedERC1155.TransactOpts, to, tokenIds, amounts)
}

// Mint is a paid mutator transaction binding the contract method 0x9727756a.
//
// Solidity: function mint(address to, uint256[] tokenIds, uint256[] amounts) returns()
func (_PeggedERC1155 *PeggedERC1155TransactorSession) Mint(to common.Address, tokenIds []*big.Int, amounts []*big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.Mint(&_PeggedERC1155.TransactOpts, to, tokenIds, amounts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PeggedERC1155 *PeggedERC1155Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PeggedERC1155 *PeggedERC1155BulkTransactor) RenounceOwnership(opts *bind.TransactOpts) types.UnsignedTransaction {
	return _PeggedERC1155.contract.GenUnsignedTransaction(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PeggedERC1155 *PeggedERC1155Session) RenounceOwnership() (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.RenounceOwnership(&_PeggedERC1155.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PeggedERC1155 *PeggedERC1155TransactorSession) RenounceOwnership() (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.RenounceOwnership(&_PeggedERC1155.TransactOpts)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_PeggedERC1155 *PeggedERC1155Transactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_PeggedERC1155 *PeggedERC1155BulkTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) types.UnsignedTransaction {
	return _PeggedERC1155.contract.GenUnsignedTransaction(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_PeggedERC1155 *PeggedERC1155Session) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.SafeBatchTransferFrom(&_PeggedERC1155.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_PeggedERC1155 *PeggedERC1155TransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.SafeBatchTransferFrom(&_PeggedERC1155.TransactOpts, from, to, ids, amounts, data)
}

// SafeMint is a paid mutator transaction binding the contract method 0x24eeedf6.
//
// Solidity: function safeMint(address to, uint256 tokenId, uint256 amount) returns()
func (_PeggedERC1155 *PeggedERC1155Transactor) SafeMint(opts *bind.TransactOpts, to common.Address, tokenId *big.Int, amount *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.contract.Transact(opts, "safeMint", to, tokenId, amount)
}

// SafeMint is a paid mutator transaction binding the contract method 0x24eeedf6.
//
// Solidity: function safeMint(address to, uint256 tokenId, uint256 amount) returns()
func (_PeggedERC1155 *PeggedERC1155BulkTransactor) SafeMint(opts *bind.TransactOpts, to common.Address, tokenId *big.Int, amount *big.Int) types.UnsignedTransaction {
	return _PeggedERC1155.contract.GenUnsignedTransaction(opts, "safeMint", to, tokenId, amount)
}

// SafeMint is a paid mutator transaction binding the contract method 0x24eeedf6.
//
// Solidity: function safeMint(address to, uint256 tokenId, uint256 amount) returns()
func (_PeggedERC1155 *PeggedERC1155Session) SafeMint(to common.Address, tokenId *big.Int, amount *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.SafeMint(&_PeggedERC1155.TransactOpts, to, tokenId, amount)
}

// SafeMint is a paid mutator transaction binding the contract method 0x24eeedf6.
//
// Solidity: function safeMint(address to, uint256 tokenId, uint256 amount) returns()
func (_PeggedERC1155 *PeggedERC1155TransactorSession) SafeMint(to common.Address, tokenId *big.Int, amount *big.Int) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.SafeMint(&_PeggedERC1155.TransactOpts, to, tokenId, amount)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_PeggedERC1155 *PeggedERC1155Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_PeggedERC1155 *PeggedERC1155BulkTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) types.UnsignedTransaction {
	return _PeggedERC1155.contract.GenUnsignedTransaction(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_PeggedERC1155 *PeggedERC1155Session) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.SafeTransferFrom(&_PeggedERC1155.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_PeggedERC1155 *PeggedERC1155TransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.SafeTransferFrom(&_PeggedERC1155.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_PeggedERC1155 *PeggedERC1155Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_PeggedERC1155 *PeggedERC1155BulkTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) types.UnsignedTransaction {
	return _PeggedERC1155.contract.GenUnsignedTransaction(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_PeggedERC1155 *PeggedERC1155Session) SetApprovalForAll(operator common.Address, approved bool) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.SetApprovalForAll(&_PeggedERC1155.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_PeggedERC1155 *PeggedERC1155TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.SetApprovalForAll(&_PeggedERC1155.TransactOpts, operator, approved)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri_) returns()
func (_PeggedERC1155 *PeggedERC1155Transactor) SetBaseURI(opts *bind.TransactOpts, uri_ string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.contract.Transact(opts, "setBaseURI", uri_)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri_) returns()
func (_PeggedERC1155 *PeggedERC1155BulkTransactor) SetBaseURI(opts *bind.TransactOpts, uri_ string) types.UnsignedTransaction {
	return _PeggedERC1155.contract.GenUnsignedTransaction(opts, "setBaseURI", uri_)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri_) returns()
func (_PeggedERC1155 *PeggedERC1155Session) SetBaseURI(uri_ string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.SetBaseURI(&_PeggedERC1155.TransactOpts, uri_)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri_) returns()
func (_PeggedERC1155 *PeggedERC1155TransactorSession) SetBaseURI(uri_ string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.SetBaseURI(&_PeggedERC1155.TransactOpts, uri_)
}

// SetURI is a paid mutator transaction binding the contract method 0x862440e2.
//
// Solidity: function setURI(uint256 tokenId, string _tokenURI) returns()
func (_PeggedERC1155 *PeggedERC1155Transactor) SetURI(opts *bind.TransactOpts, tokenId *big.Int, _tokenURI string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.contract.Transact(opts, "setURI", tokenId, _tokenURI)
}

// SetURI is a paid mutator transaction binding the contract method 0x862440e2.
//
// Solidity: function setURI(uint256 tokenId, string _tokenURI) returns()
func (_PeggedERC1155 *PeggedERC1155BulkTransactor) SetURI(opts *bind.TransactOpts, tokenId *big.Int, _tokenURI string) types.UnsignedTransaction {
	return _PeggedERC1155.contract.GenUnsignedTransaction(opts, "setURI", tokenId, _tokenURI)
}

// SetURI is a paid mutator transaction binding the contract method 0x862440e2.
//
// Solidity: function setURI(uint256 tokenId, string _tokenURI) returns()
func (_PeggedERC1155 *PeggedERC1155Session) SetURI(tokenId *big.Int, _tokenURI string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.SetURI(&_PeggedERC1155.TransactOpts, tokenId, _tokenURI)
}

// SetURI is a paid mutator transaction binding the contract method 0x862440e2.
//
// Solidity: function setURI(uint256 tokenId, string _tokenURI) returns()
func (_PeggedERC1155 *PeggedERC1155TransactorSession) SetURI(tokenId *big.Int, _tokenURI string) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.SetURI(&_PeggedERC1155.TransactOpts, tokenId, _tokenURI)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PeggedERC1155 *PeggedERC1155Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PeggedERC1155 *PeggedERC1155BulkTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) types.UnsignedTransaction {
	return _PeggedERC1155.contract.GenUnsignedTransaction(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PeggedERC1155 *PeggedERC1155Session) TransferOwnership(newOwner common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.TransferOwnership(&_PeggedERC1155.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PeggedERC1155 *PeggedERC1155TransactorSession) TransferOwnership(newOwner common.Address) (*types.UnsignedTransaction, *types.Hash, error) {
	return _PeggedERC1155.Contract.TransferOwnership(&_PeggedERC1155.TransactOpts, newOwner)
}

// PeggedERC1155ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the PeggedERC1155 contract.
type PeggedERC1155ApprovalForAllIterator struct {
	Event *PeggedERC1155ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PeggedERC1155ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PeggedERC1155ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	if it.sub == nil {
		it.done = true
		return it.Next()
	}

	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PeggedERC1155ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PeggedERC1155ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PeggedERC1155ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PeggedERC1155ApprovalForAll represents a ApprovalForAll event raised by the PeggedERC1155 contract.
type PeggedERC1155ApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// PeggedERC1155ApprovalForAllOrChainReorg represents a ApprovalForAll subscription event raised by the PeggedERC1155 contract.
type PeggedERC1155ApprovalForAllOrChainReorg struct {
	Event      *PeggedERC1155ApprovalForAll
	ChainReorg *types.ChainReorg
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_PeggedERC1155 *PeggedERC1155Filterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*PeggedERC1155ApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, err := _PeggedERC1155.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &PeggedERC1155ApprovalForAllIterator{contract: _PeggedERC1155.contract, event: "ApprovalForAll", logs: logs}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_PeggedERC1155 *PeggedERC1155Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *PeggedERC1155ApprovalForAllOrChainReorg, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PeggedERC1155.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}

	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PeggedERC1155ApprovalForAllOrChainReorg)
				event.Event = new(PeggedERC1155ApprovalForAll)

				if log.ChainReorg == nil {
					if err := _PeggedERC1155.contract.UnpackLog(event.Event, "ApprovalForAll", *log.Log); err != nil {
						return err
					}
					event.Event.Raw = *log.Log
				} else {
					event.ChainReorg = log.ChainReorg
				}

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_PeggedERC1155 *PeggedERC1155Filterer) ParseApprovalForAll(log types.Log) (*PeggedERC1155ApprovalForAll, error) {
	event := new(PeggedERC1155ApprovalForAll)
	if err := _PeggedERC1155.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PeggedERC1155OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the PeggedERC1155 contract.
type PeggedERC1155OwnershipTransferredIterator struct {
	Event *PeggedERC1155OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PeggedERC1155OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PeggedERC1155OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	if it.sub == nil {
		it.done = true
		return it.Next()
	}

	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PeggedERC1155OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PeggedERC1155OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PeggedERC1155OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PeggedERC1155OwnershipTransferred represents a OwnershipTransferred event raised by the PeggedERC1155 contract.
type PeggedERC1155OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// PeggedERC1155OwnershipTransferredOrChainReorg represents a OwnershipTransferred subscription event raised by the PeggedERC1155 contract.
type PeggedERC1155OwnershipTransferredOrChainReorg struct {
	Event      *PeggedERC1155OwnershipTransferred
	ChainReorg *types.ChainReorg
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PeggedERC1155 *PeggedERC1155Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PeggedERC1155OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, err := _PeggedERC1155.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PeggedERC1155OwnershipTransferredIterator{contract: _PeggedERC1155.contract, event: "OwnershipTransferred", logs: logs}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PeggedERC1155 *PeggedERC1155Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PeggedERC1155OwnershipTransferredOrChainReorg, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PeggedERC1155.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}

	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PeggedERC1155OwnershipTransferredOrChainReorg)
				event.Event = new(PeggedERC1155OwnershipTransferred)

				if log.ChainReorg == nil {
					if err := _PeggedERC1155.contract.UnpackLog(event.Event, "OwnershipTransferred", *log.Log); err != nil {
						return err
					}
					event.Event.Raw = *log.Log
				} else {
					event.ChainReorg = log.ChainReorg
				}

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PeggedERC1155 *PeggedERC1155Filterer) ParseOwnershipTransferred(log types.Log) (*PeggedERC1155OwnershipTransferred, error) {
	event := new(PeggedERC1155OwnershipTransferred)
	if err := _PeggedERC1155.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PeggedERC1155TransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the PeggedERC1155 contract.
type PeggedERC1155TransferBatchIterator struct {
	Event *PeggedERC1155TransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PeggedERC1155TransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PeggedERC1155TransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	if it.sub == nil {
		it.done = true
		return it.Next()
	}

	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PeggedERC1155TransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PeggedERC1155TransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PeggedERC1155TransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PeggedERC1155TransferBatch represents a TransferBatch event raised by the PeggedERC1155 contract.
type PeggedERC1155TransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// PeggedERC1155TransferBatchOrChainReorg represents a TransferBatch subscription event raised by the PeggedERC1155 contract.
type PeggedERC1155TransferBatchOrChainReorg struct {
	Event      *PeggedERC1155TransferBatch
	ChainReorg *types.ChainReorg
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_PeggedERC1155 *PeggedERC1155Filterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*PeggedERC1155TransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, err := _PeggedERC1155.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PeggedERC1155TransferBatchIterator{contract: _PeggedERC1155.contract, event: "TransferBatch", logs: logs}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_PeggedERC1155 *PeggedERC1155Filterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *PeggedERC1155TransferBatchOrChainReorg, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _PeggedERC1155.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}

	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PeggedERC1155TransferBatchOrChainReorg)
				event.Event = new(PeggedERC1155TransferBatch)

				if log.ChainReorg == nil {
					if err := _PeggedERC1155.contract.UnpackLog(event.Event, "TransferBatch", *log.Log); err != nil {
						return err
					}
					event.Event.Raw = *log.Log
				} else {
					event.ChainReorg = log.ChainReorg
				}

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_PeggedERC1155 *PeggedERC1155Filterer) ParseTransferBatch(log types.Log) (*PeggedERC1155TransferBatch, error) {
	event := new(PeggedERC1155TransferBatch)
	if err := _PeggedERC1155.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PeggedERC1155TransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the PeggedERC1155 contract.
type PeggedERC1155TransferSingleIterator struct {
	Event *PeggedERC1155TransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PeggedERC1155TransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PeggedERC1155TransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	if it.sub == nil {
		it.done = true
		return it.Next()
	}

	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PeggedERC1155TransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PeggedERC1155TransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PeggedERC1155TransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PeggedERC1155TransferSingle represents a TransferSingle event raised by the PeggedERC1155 contract.
type PeggedERC1155TransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// PeggedERC1155TransferSingleOrChainReorg represents a TransferSingle subscription event raised by the PeggedERC1155 contract.
type PeggedERC1155TransferSingleOrChainReorg struct {
	Event      *PeggedERC1155TransferSingle
	ChainReorg *types.ChainReorg
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_PeggedERC1155 *PeggedERC1155Filterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*PeggedERC1155TransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, err := _PeggedERC1155.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PeggedERC1155TransferSingleIterator{contract: _PeggedERC1155.contract, event: "TransferSingle", logs: logs}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_PeggedERC1155 *PeggedERC1155Filterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *PeggedERC1155TransferSingleOrChainReorg, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _PeggedERC1155.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}

	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PeggedERC1155TransferSingleOrChainReorg)
				event.Event = new(PeggedERC1155TransferSingle)

				if log.ChainReorg == nil {
					if err := _PeggedERC1155.contract.UnpackLog(event.Event, "TransferSingle", *log.Log); err != nil {
						return err
					}
					event.Event.Raw = *log.Log
				} else {
					event.ChainReorg = log.ChainReorg
				}

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_PeggedERC1155 *PeggedERC1155Filterer) ParseTransferSingle(log types.Log) (*PeggedERC1155TransferSingle, error) {
	event := new(PeggedERC1155TransferSingle)
	if err := _PeggedERC1155.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PeggedERC1155URIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the PeggedERC1155 contract.
type PeggedERC1155URIIterator struct {
	Event *PeggedERC1155URI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PeggedERC1155URIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PeggedERC1155URI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	if it.sub == nil {
		it.done = true
		return it.Next()
	}

	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PeggedERC1155URI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PeggedERC1155URIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PeggedERC1155URIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PeggedERC1155URI represents a URI event raised by the PeggedERC1155 contract.
type PeggedERC1155URI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// PeggedERC1155URIOrChainReorg represents a URI subscription event raised by the PeggedERC1155 contract.
type PeggedERC1155URIOrChainReorg struct {
	Event      *PeggedERC1155URI
	ChainReorg *types.ChainReorg
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_PeggedERC1155 *PeggedERC1155Filterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*PeggedERC1155URIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, err := _PeggedERC1155.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &PeggedERC1155URIIterator{contract: _PeggedERC1155.contract, event: "URI", logs: logs}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_PeggedERC1155 *PeggedERC1155Filterer) WatchURI(opts *bind.WatchOpts, sink chan<- *PeggedERC1155URIOrChainReorg, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _PeggedERC1155.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}

	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PeggedERC1155URIOrChainReorg)
				event.Event = new(PeggedERC1155URI)

				if log.ChainReorg == nil {
					if err := _PeggedERC1155.contract.UnpackLog(event.Event, "URI", *log.Log); err != nil {
						return err
					}
					event.Event.Raw = *log.Log
				} else {
					event.ChainReorg = log.ChainReorg
				}

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_PeggedERC1155 *PeggedERC1155Filterer) ParseURI(log types.Log) (*PeggedERC1155URI, error) {
	event := new(PeggedERC1155URI)
	if err := _PeggedERC1155.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
